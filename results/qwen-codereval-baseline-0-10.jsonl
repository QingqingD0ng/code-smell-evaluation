{"dataset": "coderEval", "task_id": "62e60f43d76274f8a4026e28", "original_prompt": "def hydrate_time(nanoseconds, tz=None):\n\t\"\"\"\n\tConvert nanoseconds to a time in fixed format.\n\t\"\"\"\n\t", "generations": {"Qwen/Qwen2.5-Coder-32B-Instruct": {"baseline": "def hydrate_time(nanoseconds, tz=None):\n    from datetime import datetime, timezone, timedelta\n    if tz is None:\n        tz = timezone.utc\n    seconds, nanos = divmod(nanoseconds, 1_000_000_000)\n    dt = datetime.fromtimestamp(seconds, tz) + timedelta(microseconds=nanos // 1000)\n    return dt.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]"}}}
{"dataset": "coderEval", "task_id": "62e60f3bd76274f8a4026e10", "original_prompt": "def dehydrate_timedelta(value):\n\t\"\"\"\n\tUse the value in timedelta to generate the Structure class.\n\t\"\"\"\n\t", "generations": {"Qwen/Qwen2.5-Coder-32B-Instruct": {"baseline": "```python\nfrom dataclasses import dataclass\n\n@dataclass\nclass Structure:\n    days: int\n    seconds: int\n    microseconds: int\n\ndef dehydrate_timedelta(value):\n    return Structure(days=value.days, seconds=value.seconds, microseconds=value.microseconds)\n```"}}}
{"dataset": "coderEval", "task_id": "62e60f37d76274f8a4026dfd", "original_prompt": "def dehydrate_time(value):\n\t\"\"\"\n\tUse ticks in the Time class to generate the Structure class.\n\t\"\"\"\n\t", "generations": {"Qwen/Qwen2.5-Coder-32B-Instruct": {"baseline": "def dehydrate_time(value):\n    return value.ticks"}}}
{"dataset": "coderEval", "task_id": "62e60f33d76274f8a4026de9", "original_prompt": "def dehydrate_point(value):\n\t\"\"\"\n\tThe structure class is generated based on the value length.\n\t\"\"\"\n\t", "generations": {"Qwen/Qwen2.5-Coder-32B-Instruct": {"baseline": "def dehydrate_point(value):\n    if len(value) == 2:\n        return {'x': value[0], 'y': value[1]}\n    elif len(value) == 3:\n        return {'x': value[0], 'y': value[1], 'z': value[2]}\n    else:\n        raise ValueError(\"Unsupported point dimension\")"}}}
{"dataset": "coderEval", "task_id": "62e60ed4d76274f8a4026da0", "original_prompt": "def keys(self):\n\t\"\"\"\n\tReturns the __keys property of a class as a List\n\t\"\"\"\n\t", "generations": {"Qwen/Qwen2.5-Coder-32B-Instruct": {"baseline": "def keys(self):\n    return list(self.__keys)"}}}
{"dataset": "coderEval", "task_id": "62e60ecfd76274f8a4026d6a", "original_prompt": "def protocol_handlers(cls, protocol_version=None):\n\t\"\"\"\n\tDifferent forms of Bolt protocol handlers are returned based on the value of protocol_version.\n\t\"\"\"\n\t", "generations": {"Qwen/Qwen2.5-Coder-32B-Instruct": {"baseline": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version == 1:\n        return cls.ProtocolV1Handler()\n    elif protocol_version == 2:\n        return cls.ProtocolV2Handler()\n    elif protocol_version == 3:\n        return cls.ProtocolV3Handler()\n    elif protocol_version == 4:\n        return cls.ProtocolV4Handler()\n    else:\n        return cls.DefaultProtocolHandler()"}}}
{"dataset": "coderEval", "task_id": "62e60e49d76274f8a4026d25", "original_prompt": "def unit_of_work(metadata=None, timeout=None):\n\t\"\"\"\n\tReturns a decorator with metadata and timeout attributes.\n\t\"\"\"\n\t", "generations": {"Qwen/Qwen2.5-Coder-32B-Instruct": {"baseline": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        func.metadata = metadata\n        func.timeout = timeout\n        return func\n    return decorator"}}}
{"dataset": "coderEval", "task_id": "62e60e05d76274f8a4026cfd", "original_prompt": "def index(self, key):\n\t\"\"\"\n\tReturns the key in the form of int.\n\t\"\"\"\n\t", "generations": {"Qwen/Qwen2.5-Coder-32B-Instruct": {"baseline": "def index(self, key):\n    return int(key)"}}}
{"dataset": "coderEval", "task_id": "62e60da4d76274f8a4026cf1", "original_prompt": "def values(self, *keys):\n\t\"\"\"\n\tReturns the key filtered by self.index in the form of a list.\n\t\"\"\"\n\t", "generations": {"Qwen/Qwen2.5-Coder-32B-Instruct": {"baseline": "def values(self, *keys):\n    return [self.index[key] for key in keys if key in self.index]"}}}
{"dataset": "coderEval", "task_id": "62e60b10d76274f8a4026ccd", "original_prompt": "def data(self, *keys):\n\t\"\"\"\n\tReturns the keys processed by the transform method of the RecordExporter class.\n\t\"\"\"\n\t", "generations": {"Qwen/Qwen2.5-Coder-32B-Instruct": {"baseline": "def data(self, *keys):\n    return [self.transform(key) for key in keys]"}}}
