{"dataset": "coderEval", "task_id": "62e60f43d76274f8a4026e28", "original_prompt": "def hydrate_time(nanoseconds, tz=None):\n\t\"\"\"\n\tConvert nanoseconds to a time in fixed format.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom datetime import datetime, timezone, timedelta\n\ndef hydrate_time(nanoseconds, tz=None):\n    timestamp = nanoseconds / 1e9\n    dt = datetime.fromtimestamp(timestamp, tz=timezone.utc if tz is None else tz)\n    if tz is None:\n        dt = dt.replace(tzinfo=None)\n    return dt.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n\n# Example usage:\n# print(hydrate_time(1633072800000000000))  # Output: '2021-10-01 00:00:00.000'\n```\n\nThis code converts nanoseconds to a datetime object and formats it into a string. If no timezone is provided, it defaults to UTC and removes the timezone information from the output."}}}
{"dataset": "coderEval", "task_id": "62e60f3bd76274f8a4026e10", "original_prompt": "def dehydrate_timedelta(value):\n\t\"\"\"\n\tUse the value in timedelta to generate the Structure class.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom datetime import timedelta\n\nclass Structure:\n    def __init__(self, days=0, seconds=0, microseconds=0):\n        self.days = days\n        self.seconds = seconds\n        self.microseconds = microseconds\n\ndef dehydrate_timedelta(value):\n    return Structure(days=value.days, seconds=value.seconds, microseconds=value.microseconds)\n```"}}}
{"dataset": "coderEval", "task_id": "62e60f37d76274f8a4026dfd", "original_prompt": "def dehydrate_time(value):\n\t\"\"\"\n\tUse ticks in the Time class to generate the Structure class.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport time\n\nclass Structure:\n    def __init__(self, ticks):\n        self.ticks = ticks\n\ndef dehydrate_time(value):\n    ticks = int(time.mktime(value.timetuple()) * 1000 + value.microsecond / 1000)\n    return Structure(ticks)\n```"}}}
{"dataset": "coderEval", "task_id": "62e60f33d76274f8a4026de9", "original_prompt": "def dehydrate_point(value):\n\t\"\"\"\n\tThe structure class is generated based on the value length.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef dehydrate_point(value):\n    size = len(value)\n    if size == 2:\n        class Point2D:\n            def __init__(self, x, y):\n                self.x = x\n                self.y = y\n    elif size == 3:\n        class Point3D:\n            def __init__(self, x, y, z):\n                self.x = x\n                self.y = y\n                self.z = z\n    elif size == 4:\n        class Point4D:\n            def __init__(self, x, y, z, w):\n                self.x = x\n                self.y = y\n                self.z = z\n                self.w = w\n\n    if size == 2:\n        return Point2D(*value)\n    elif size == 3:\n        return Point3D(*value)\n    elif size == 4:\n        return Point4D(*value)\n```"}}}
{"dataset": "coderEval", "task_id": "62e60ed4d76274f8a4026da0", "original_prompt": "def keys(self):\n\t\"\"\"\n\tReturns the __keys property of a class as a List\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass MyClass:\n    def __init__(self):\n        self.__keys = ['key1', 'key2', 'key3']\n\n    def keys(self):\n        return self.__keys\n```"}}}
{"dataset": "coderEval", "task_id": "62e60ecfd76274f8a4026d6a", "original_prompt": "def protocol_handlers(cls, protocol_version=None):\n\t\"\"\"\n\tDifferent forms of Bolt protocol handlers are returned based on the value of protocol_version.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass ProtocolClass:\n    @classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        if protocol_version is None or protocol_version == 1:\n            return cls.handler_v1\n        elif protocol_version == 2:\n            return cls.handler_v2\n        else:\n            return cls.default_handler\n\n    @staticmethod\n    def handler_v1():\n        return \"Handler for Protocol Version 1\"\n\n    @staticmethod\n    def handler_v2():\n        return \"Handler for Protocol Version 2\"\n\n    @staticmethod\n    def default_handler():\n        return \"Default Handler\"\n```"}}}
{"dataset": "coderEval", "task_id": "62e60e49d76274f8a4026d25", "original_prompt": "def unit_of_work(metadata=None, timeout=None):\n\t\"\"\"\n\tReturns a decorator with metadata and timeout attributes.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom functools import wraps\nimport time\n\ndef unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if timeout is not None:\n                start_time = time.time()\n                result = func(*args, **kwargs)\n                elapsed_time = time.time() - start_time\n                if elapsed_time > timeout:\n                    raise TimeoutError(f\"Function {func.__name__} exceeded timeout of {timeout} seconds\")\n                return result\n            else:\n                return func(*args, **kwargs)\n        \n        wrapper.metadata = metadata\n        wrapper.timeout = timeout\n        return wrapper\n    \n    return decorator\n```"}}}
{"dataset": "coderEval", "task_id": "62e60e05d76274f8a4026cfd", "original_prompt": "def index(self, key):\n\t\"\"\"\n\tReturns the key in the form of int.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef index(self, key):\n    return int(key)\n```"}}}
{"dataset": "coderEval", "task_id": "62e60da4d76274f8a4026cf1", "original_prompt": "def values(self, *keys):\n\t\"\"\"\n\tReturns the key filtered by self.index in the form of a list.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass YourClassName:\n    def __init__(self, data, index):\n        self.data = data\n        self.index = index\n\n    def values(self, *keys):\n        return [self.data[key][self.index] for key in keys if key in self.data]\n```"}}}
{"dataset": "coderEval", "task_id": "62e60b10d76274f8a4026ccd", "original_prompt": "def data(self, *keys):\n\t\"\"\"\n\tReturns the keys processed by the transform method of the RecordExporter class.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass RecordExporter:\n    def transform(self, data):\n        # Example transformation, implement as required\n        return {k: v.upper() if isinstance(v, str) else v for k, v in data.items()}\n\nclass DataProcessor:\n    def __init__(self, data):\n        self.data = data\n        self.exporter = RecordExporter()\n\n    def process(self, *keys):\n        processed_data = self.exporter.transform(self.data)\n        return {key: processed_data[key] for key in keys if key in processed_data}\n\n# Example usage:\n# data = {'name': 'Alice', 'age': 30}\n# processor = DataProcessor(data)\n# result = processor.process('name', 'age')\n# print(result)  # Output: {'name': 'ALICE', 'age': 30}\n```"}}}
{"dataset": "coderEval", "task_id": "62e6087bd76274f8a4026bfa", "original_prompt": "def pop_u16(self):\n\t\"\"\"\n\tRemove the last two elements in self.data and return\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass ExampleClass:\n    def __init__(self, data):\n        self.data = data\n\n    def pop_u16(self):\n        return (self.data.pop() << 8) | self.data.pop()\n```"}}}
{"dataset": "coderEval", "task_id": "62e6087ad76274f8a4026bf2", "original_prompt": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n\t\"\"\"\n\tAppends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass ExampleClass:\n    def __init__(self):\n        self.output_queue = []\n\n    def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        message = {\n            \"message\": \"DISCARD\",\n            \"n\": n,\n            \"qid\": qid,\n            \"dehydration_hooks\": dehydration_hooks,\n            \"hydration_hooks\": hydration_hooks,\n            \"handlers\": handlers\n        }\n        self.output_queue.append(message)\n\n    def get_output_queue(self):\n        return self.output_queue\n```\n\nThis code defines a class `ExampleClass` with a method `discard` that appends a DISCARD message to an output queue. The message includes the parameters `n`, `qid`, `dehydration_hooks`, `hydration_hooks`, and `handlers`. Additionally, there's a helper method `get_output_queue` to retrieve the current state of the output queue."}}}
{"dataset": "coderEval", "task_id": "62e60879d76274f8a4026bec", "original_prompt": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n\t\"\"\"\n\tAppends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass TransactionManager:\n    def __init__(self):\n        self.output_queue = []\n\n    def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        message = {\n            \"type\": \"BEGIN\",\n            \"mode\": mode if mode else \"WRITE\",\n            \"bookmarks\": list(bookmarks) if bookmarks else [],\n            \"metadata\": metadata if metadata else {},\n            \"timeout\": timeout,\n            \"db\": db,\n            \"imp_user\": imp_user,\n            \"dehydration_hooks\": dehydration_hooks,\n            \"hydration_hooks\": hydration_hooks,\n            \"handlers\": handlers\n        }\n        self.output_queue.append(message)\n        return Response(message)\n\nclass Response:\n    def __init__(self, message):\n        self.message = message\n```"}}}
{"dataset": "coderEval", "task_id": "62e60723d76274f8a4026b75", "original_prompt": "def round_half_to_even(n):\n\t\"\"\"\n\tRound a floating-point number\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef round_half_to_even(n):\n    integer_part = int(n)\n    fractional_part = n - integer_part\n    if fractional_part < 0.5:\n        return integer_part\n    elif fractional_part > 0.5:\n        return integer_part + 1\n    else:\n        return integer_part + (integer_part % 2 == 1)\n```"}}}
{"dataset": "coderEval", "task_id": "62e60707d76274f8a4026b69", "original_prompt": "def point_type(name, fields, srid_map):\n\t\"\"\"\n\tDynamically Generating Point Class\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass Point:\n    def __init__(self, **kwargs):\n        for field in fields:\n            setattr(self, field, kwargs.get(field))\n\ndef point_type(name, fields, srid_map):\n    class DynamicPoint(Point):\n        def __init__(self, srid, **kwargs):\n            super().__init__(**kwargs)\n            self.srid = srid_map.get(srid, None)\n            self.name = name\n    return DynamicPoint\n```"}}}
{"dataset": "coderEval", "task_id": "62e5dc9ed76274f8a4026b5b", "original_prompt": "def deprecated(message):\n\t\"\"\"\n\tReturn a decorator function for deprecating functions and methods.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport warnings\nimport functools\n\ndef deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapped\n    return decorator\n```"}}}
{"dataset": "coderEval", "task_id": "62e4fc3c85ea98643089041e", "original_prompt": "def _inline_r_setup(code: str) -> str:\n\t\"\"\"\n\tSome behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _inline_r_setup(code: str) -> str:\n    setup_code = \"\"\"\n    if (interactive()) {\n        options(stringsAsFactors = FALSE)\n        options(datatable.fread.datatable = TRUE)\n        options(dplyr.summarise.inform = FALSE)\n        options(width = 120)\n        Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS = \"true\")\n    }\n    \"\"\"\n    return setup_code + code\n```"}}}
{"dataset": "coderEval", "task_id": "62e4fbda85ea986430890405", "original_prompt": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs:\n\t\"\"\"\n\tSimplified Implementation of Xargs in Linux\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport subprocess\nfrom typing import Sequence, Tuple\nimport os\nimport platform\nimport multiprocessing\n\ndef _get_platform_max_length() -> int:\n    if platform.system() == 'Windows':\n        return 2048  # Approximate max length for Windows command line\n    return 4096  # Approximate max length for Unix/Linux command line\n\ndef xargs(\n        cmd: Tuple[str,...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs\n):\n    def build_command(args):\n        command = list(cmd)\n        command.extend(args)\n        if color:\n            command.insert(1, '--color')\n        return command\n\n    def execute_command(command):\n        subprocess.run(command, **kwargs)\n\n    pool = multiprocessing.Pool(processes=target_concurrency)\n    current_batch = []\n    current_length = 0\n\n    for arg in varargs:\n        arg_length = len(arg) + 1  # +1 for space or null character\n        if current_length + arg_length > _max_length or len(current_batch) == target_concurrency:\n            pool.apply_async(execute_command, (build_command(current_batch),))\n            current_batch = []\n            current_length = 0\n        current_batch.append(arg)\n        current_length += arg_length\n\n    if current_batch:\n        pool.apply_async(execute_command, (build_command(current_batch),))\n\n    pool.close()\n    pool.join()\n```"}}}
{"dataset": "coderEval", "task_id": "62e4fbda85ea986430890403", "original_prompt": "def _shuffled(seq: Sequence[str]) -> list[str]:\n\t\"\"\"\n\tShuffle a given seq with the given FIXED_RANDOM_SEED\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom typing import Sequence\nimport random\n\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n    random.seed(42)\n    shuffled_seq = list(seq)\n    random.shuffle(shuffled_seq)\n    return shuffled_seq\n```"}}}
{"dataset": "coderEval", "task_id": "62e4fb6585ea98643089032b", "original_prompt": "def parse_version(s: str) -> tuple[int, ...]:\n\t\"\"\"\n\tConverts a string concatenated by dot to a tuple consisting of integers.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef parse_version(s: str) -> tuple[int,...]:\n    return tuple(map(int, s.split('.')))\n```"}}}
{"dataset": "coderEval", "task_id": "62e4fb4d85ea9864308902e7", "original_prompt": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n\t\"\"\"\n\tComplement the full path to exe and return it in its original form\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n    normalized_cmd = tuple(os.path.abspath(arg) if os.path.splitext(arg)[1] else arg for arg in cmd)\n    return normalized_cmd\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d27a48ba5a41d1c3f4c6", "original_prompt": "def cached(cache, key=hashkey, lock=None):\n\t\"\"\"\n\tReturns a decorator function that saves the results in the cache\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom functools import wraps\n\ndef cached(cache, key=hash, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            cache_key = key((func.__name__, args, frozenset(kwargs.items())))\n            if lock:\n                with lock:\n                    if cache_key in cache:\n                        return cache[cache_key]\n                    result = func(*args, **kwargs)\n                    cache[cache_key] = result\n                    return result\n            else:\n                if cache_key in cache:\n                    return cache[cache_key]\n                result = func(*args, **kwargs)\n                cache[cache_key] = result\n                return result\n        return wrapper\n    return decorator\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d24048ba5a41d1c3f49f", "original_prompt": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport time\nfrom collections import OrderedDict\nfrom functools import wraps\n\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    def decorator(func):\n        cache = OrderedDict()\n        timestamps = {}\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = args\n            if typed:\n                key += tuple(sorted(kwargs.items()))\n            else:\n                key += tuple(kwargs.items())\n\n            current_time = timer()\n\n            # Clean up expired items\n            expired_keys = [k for k, t in timestamps.items() if current_time - t > ttl]\n            for k in expired_keys:\n                cache.pop(k, None)\n                timestamps.pop(k, None)\n\n            if key in cache:\n                # Move the key to the end to show that it was recently used\n                cache.move_to_end(key)\n                return cache[key]\n\n            if len(cache) >= maxsize:\n                # Remove the first (least recently used) item\n                cache.popitem(last=False)\n                timestamps.popitem(last=False)\n\n            result = func(*args, **kwargs)\n            cache[key] = result\n            timestamps[key] = current_time\n            return result\n\n        return wrapper\n\n    return decorator\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d23b48ba5a41d1c3f49a", "original_prompt": "def mru_cache(maxsize=128, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom collections import OrderedDict\n\ndef mru_cache(maxsize=128, typed=False):\n    def decorator(func):\n        cache = OrderedDict()\n\n        def wrapper(*args, **kwargs):\n            key = args if not typed else (args, tuple(sorted(kwargs.items())))\n            if key in cache:\n                cache.move_to_end(key)\n                return cache[key]\n            result = func(*args, **kwargs)\n            cache[key] = result\n            if len(cache) > maxsize:\n                cache.popitem(last=False)\n            return result\n\n        return wrapper\n\n    return decorator\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d23948ba5a41d1c3f498", "original_prompt": "def lru_cache(maxsize=128, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom collections import OrderedDict\n\ndef lru_cache(maxsize=128, typed=False):\n    if not isinstance(maxsize, int) or maxsize < 1:\n        raise TypeError('maxsize must be a positive integer')\n\n    def decorator(func):\n        cache = OrderedDict()\n        use_count = OrderedDict()\n\n        def wrapper(*args, **kwargs):\n            key = args\n            if typed:\n                key += tuple(sorted(kwargs.items()))\n                key += tuple(type(arg) for arg in args)\n                key += tuple(type(value) for _, value in sorted(kwargs.items()))\n\n            if key in cache:\n                use_count.move_to_end(key)\n                return cache[key]\n\n            result = func(*args, **kwargs)\n            cache[key] = result\n            use_count[key] = 0\n\n            if len(cache) > maxsize:\n                oldest = next(iter(use_count))\n                del cache[oldest]\n                del use_count[oldest]\n\n            use_count.move_to_end(key)\n            return result\n\n        return wrapper\n\n    return decorator\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d23748ba5a41d1c3f496", "original_prompt": "def lfu_cache(maxsize=128, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom collections import defaultdict\nfrom functools import wraps\n\ndef lfu_cache(maxsize=128, typed=False):\n    def decorating_function(user_function):\n        cache = {}\n        use_count = defaultdict(int)\n        key_list = []\n\n        @wraps(user_function)\n        def wrapper(*args, **kwargs):\n            key = args\n            if typed:\n                key += tuple(sorted(kwargs.items()))\n                key += tuple(type(v) for v in args)\n                key += tuple(type(v) for v in kwargs.values())\n\n            if key in cache:\n                use_count[key] += 1\n                return cache[key]\n\n            result = user_function(*args, **kwargs)\n            cache[key] = result\n            use_count[key] += 1\n            key_list.append(key)\n\n            if len(cache) > maxsize:\n                least_used_key = min(key_list, key=lambda k: use_count[k])\n                del cache[least_used_key]\n                del use_count[least_used_key]\n                key_list.remove(least_used_key)\n\n            return result\n\n        return wrapper\n    return decorating_function\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d22f48ba5a41d1c3f488", "original_prompt": "def popitem(self):\n\t\"\"\"\n\tRemove the value corresponding to the first inserted key and returns the key and value in tuple format.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code for the `popitem` method that removes and returns the first inserted key-value pair from a dictionary-like data structure:\n\n```python\nclass CustomDict:\n    def __init__(self):\n        self._keys = []\n        self._values = {}\n\n    def __setitem__(self, key, value):\n        if key not in self._values:\n            self._keys.append(key)\n        self._values[key] = value\n\n    def popitem(self):\n        if not self._keys:\n            raise KeyError(\"popitem(): dictionary is empty\")\n        key = self._keys.pop(0)\n        value = self._values.pop(key)\n        return key, value\n```\n\nThis implementation uses two attributes: `_keys` to keep track of the order of insertion and `_values` to store the key-value pairs. The `popitem` method removes and returns the first inserted key and its corresponding value."}}}
{"dataset": "coderEval", "task_id": "62b8d22a48ba5a41d1c3f47e", "original_prompt": "def setdefault(self, key, default=None):\n\t\"\"\"\n\tIf a key exists in the class, the value corresponding to the key is returned. Otherwise, the value corresponding to the key is set to default.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass CustomDict:\n    def __init__(self):\n        self.data = {}\n\n    def setdefault(self, key, default=None):\n        if key not in self.data:\n            self.data[key] = default\n        return self.data[key]\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d22948ba5a41d1c3f47c", "original_prompt": "def get(self, key, default=None):\n\t\"\"\"\n\tIf a key exists in the class, the value corresponding to the key is returned. Otherwise, default is returned.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass MyClass:\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n\n    def get(self, key, default=None):\n        return self.__dict__.get(key, default)\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d22548ba5a41d1c3f472", "original_prompt": "def cachedmethod(cache, key=hashkey, lock=None):\n\t\"\"\"\n\tReturns a decorator function that can call a result in the cache.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here is a Python implementation of the `cachedmethod` function, which creates a decorator to cache results of method calls:\n\n```python\nfrom functools import wraps\nimport threading\n\ndef cachedmethod(cache, key=hash, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            cache_key = key((func.__name__, args, frozenset(kwargs.items())))\n            if lock:\n                with lock:\n                    if cache_key in cache:\n                        return cache[cache_key]\n                    result = func(self, *args, **kwargs)\n                    cache[cache_key] = result\n                    return result\n            else:\n                if cache_key in cache:\n                    return cache[cache_key]\n                result = func(self, *args, **kwargs)\n                cache[cache_key] = result\n                return result\n        return wrapper\n    return decorator\n\n# Example usage:\n\nclass Example:\n    def __init__(self):\n        self.cache = {}\n    \n    @cachedmethod(cache=lambda self: self.cache, lock=threading.Lock())\n    def compute(self, x, y):\n        return x + y\n\n# Instantiate the class and use the cached method\nexample = Example()\nprint(example.compute(2, 3))  # Computes and caches the result\nprint(example.compute(2, 3))  # Retrieves the result from the cache\n```\n\n### Explanation:\n- **Decorator Function**: `cachedmethod` takes a `cache`, a `key` function (defaulting to `hash`), and an optional `lock`.\n- **Wrapper Function**: The `wrapper` function checks if the result is already cached using the `cache_key`. If cached, it returns the cached result; otherwise, it computes the result, caches it, and returns it.\n- **Thread Safety**: If a `lock` is provided, it ensures thread safety by using a lock when accessing the cache.\n- **Usage**: The `Example` class demonstrates how to use the `cachedmethod` decorator to cache results of a method call."}}}
{"dataset": "coderEval", "task_id": "62b8c517e0d34b282c18122e", "original_prompt": "def extostr(cls, e, max_level=30, max_path_level=5):\n\t\"\"\"\n\tFormat the exception as a string\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef extostr(cls, e, max_level=30, max_path_level=5):\n    if not isinstance(e, BaseException):\n        raise TypeError(\"Argument 'e' must be an exception\")\n\n    def format_exception(exc, level):\n        if level > max_level:\n            return \"Max recursion level reached\"\n        exc_type = type(exc)\n        exc_args = exc.args if exc.args else ()\n        formatted = f\"{exc_type.__module__}.{exc_type.__name__}: {exc_args}\"\n        if exc.__cause__:\n            formatted += f\"\\nCaused by: {format_exception(exc.__cause__, level + 1)}\"\n        if exc.__context__ and not exc.__suppress_context__:\n            formatted += f\"\\nDuring handling of the above exception, another exception occurred:\\n{format_exception(exc.__context__, level + 1)}\"\n        return formatted\n\n    formatted_exception = format_exception(e, 0)\n    path = e.__traceback__.tb_frame.f_code.co_filename\n    line_number = e.__traceback__.tb_lineno\n    path_parts = path.split('/')\n    path_parts = path_parts[-max_path_level:] if len(path_parts) > max_path_level else path_parts\n    path_formatted = '/' + '/'.join(path_parts)\n\n    return f\"Exception in {path_formatted} at line {line_number}:\\n{formatted_exception}\"\n```"}}}
{"dataset": "coderEval", "task_id": "62b8bbbfe0d34b282c181210", "original_prompt": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n\t\"\"\"\n\tWrites the data in the text buffer to a file\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    mode = 'w' if overwrite else 'a'\n    with open(file_name, mode, encoding=encoding) as file:\n        file.write(text_buffer)\n```"}}}
{"dataset": "coderEval", "task_id": "62b8bbbfe0d34b282c18120f", "original_prompt": "def file_to_textbuffer(file_name, encoding):\n\t\"\"\"\n\tLoad a file toward a text buffer\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef file_to_textbuffer(file_name, encoding):\n    with open(file_name, 'r', encoding=encoding) as file:\n        return file.read()\n```"}}}
{"dataset": "coderEval", "task_id": "62b8bbbce0d34b282c18120d", "original_prompt": "def is_file_exist(file_name):\n\t\"\"\"\n\tCheck whether file_name is an existing file.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef is_file_exist(file_name):\n    return os.path.isfile(file_name)\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b99de0d34b282c1811f8", "original_prompt": "def _reset_logging(cls):\n\t\"\"\"\n\tReset the logging system\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport logging\n\ndef _reset_logging(cls):\n    logging.disable(logging.NOTSET)\n    for handler in logging.root.handlers[:]:\n        logging.root.removeHandler(handler)\n    logging.basicConfig(level=logging.WARNING)\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b59feb7e40a82d2d1291", "original_prompt": "def _getTargetClass(self):\n\t\"\"\"\n\tDefine this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass MyClass:\n    def _getTargetClass(self):\n        class_name = self.__class__.__name__\n        if class_name.endswith('Py') or class_name.endswith('Fallback'):\n            return class_name.rstrip('Py').rstrip('Fallback')\n        return class_name\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b590eb7e40a82d2d1275", "original_prompt": "def _legacy_mergeOrderings(orderings):\n\t\"\"\"\n\tCombine multiple lists in the sequence of occurrence into a list with no duplicate elements.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _legacy_mergeOrderings(orderings):\n    result = []\n    seen = set()\n    for ordering in orderings:\n        for item in ordering:\n            if item not in seen:\n                seen.add(item)\n                result.append(item)\n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b58deb7e40a82d2d1269", "original_prompt": "def directlyProvidedBy(object):\n\t\"\"\"\n\tReturn the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom zope.interface import providedBy, directlyProvides, Interface\n\ndef directlyProvidedBy(obj):\n    interfaces = []\n    provided_int = providedBy(obj)\n    for interface in provided_int:\n        for name, obj in interface.namesAndDescriptions():\n            if obj is not None and isinstance(obj, Interface) and obj in provided_int:\n                interfaces.append(obj)\n    return interfaces\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b559eb7e40a82d2d11f8", "original_prompt": "def minimalBases(classes):\n\t\"\"\"\n\tReturns all classes without subclasses as a list.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef minimalBases(classes):\n    all_classes = set()\n    subclass_of = set()\n\n    for cls, subs in classes.items():\n        all_classes.add(cls)\n        subclass_of.update(subs)\n\n    return list(all_classes - subclass_of)\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b4b9eb7e40a82d2d1134", "original_prompt": "def namesAndDescriptions(self, all=False):\n\t\"\"\"\n\tReturns the name and description of the current class attribute.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's a Python function that matches your description:\n\n```python\ndef namesAndDescriptions(self, all=False):\n    if all:\n        return {attr: getattr(self, attr).__doc__ for attr in dir(self) if not attr.startswith('__') and not callable(getattr(self, attr))}\n    else:\n        return {self.__class__.__name__: self.__class__.__doc__}\n```\n\nThis function returns the names and descriptions of class attributes. If `all` is `True`, it returns descriptions for all non-callable, non-private attributes. Otherwise, it returns the class name and its docstring."}}}
{"dataset": "coderEval", "task_id": "62b8b416eb7e40a82d2d1129", "original_prompt": "def names(self, all=False):\n\t\"\"\"\n\tReturn the attribute names of current class.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass MyClass:\n    def __init__(self):\n        self.attr1 = 1\n        self.attr2 = 2\n        self.attr3 = 3\n\n    def names(self, all=False):\n        if all:\n            return [key for key in self.__class__.__dict__.keys() if not key.startswith('_')]\n        else:\n            return [key for key in self.__dict__.keys() if not key.startswith('_')]\n\n# Example usage:\n# obj = MyClass()\n# print(obj.names())  # Output: ['attr1', 'attr2', 'attr3']\n# print(obj.names(all=True))  # Output: ['attr1', 'attr2', 'attr3', 'names']\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b3d6eb7e40a82d2d111c", "original_prompt": "def _normalizeargs(sequence, output=None):\n\t\"\"\"\n\tNormalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    for item in sequence:\n        if isinstance(item, tuple):\n            output.extend(_normalizeargs(item, []))\n        elif hasattr(item, 'interfaces'):\n            output.extend(item.interfaces)\n        else:\n            output.append(item)\n\n    return output\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b3d5eb7e40a82d2d1110", "original_prompt": "def _c_optimizations_available():\n\t\"\"\"\n\tIf available, return the C optimization module, otherwise a false value.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b3d4eb7e40a82d2d110f", "original_prompt": "def _should_attempt_c_optimizations():\n\t\"\"\"\n\tReturn a true value if we use the C optimizations.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _should_attempt_c_optimizations():\n    return True  # Assuming you want to always attempt C optimizations\n``` \n\nIf the logic for determining when to attempt C optimizations is more complex, please provide further details."}}}
{"dataset": "coderEval", "task_id": "62b8b3d4eb7e40a82d2d110e", "original_prompt": "def _c_optimizations_ignored():\n\t\"\"\"\n\tReturn True if get \"PURE_PYTHON\" environ is not none and not 0, else return False\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef _c_optimizations_ignored():\n    pure_python = os.environ.get(\"PURE_PYTHON\")\n    if pure_python not in (None, '0'):\n        return True\n    return False\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b3d4eb7e40a82d2d110d", "original_prompt": "def _c_optimizations_required():\n\t\"\"\"\n\tReturn a true value if the C optimizations are required.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _c_optimizations_required():\n    import os\n    return os.getenv('C_OPTIMIZATIONS', 'false').lower() in ('true', '1', 'yes')\n```"}}}
{"dataset": "coderEval", "task_id": "62b87b989a0c4fa8b80b35ee", "original_prompt": "def reset(self):\n\t\"\"\"\n\tCurrent context is reset to an empty dict, bins of the class are reinitialized with the *initial_value* or with *make_bins()*.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass MyClass:\n    def __init__(self, initial_value=None, make_bins=None):\n        self.initial_value = initial_value\n        self.make_bins = make_bins\n        self.context = {}\n        self.bins = {}\n        self.reset()\n\n    def reset(self):\n        self.context = {}\n        if self.make_bins:\n            self.bins = self.make_bins()\n        else:\n            self.bins = {key: self.initial_value for key in self.bins.keys()}\n\n# Example usage\n# my_instance = MyClass(initial_value=0, make_bins=lambda: {'bin1': 0, 'bin2': 0})\n# my_instance.reset()\n```"}}}
{"dataset": "coderEval", "task_id": "62b87b859a0c4fa8b80b35d7", "original_prompt": "def to_csv(self, separator=\",\", header=None):\n\t\"\"\"\n\t.. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport csv\nimport io\n\nclass Graph:\n    def __init__(self, points):\n        self.points = points\n\n    def to_csv(self, separator=\",\", header=None):\n        output = io.StringIO()\n        writer = csv.writer(output, delimiter=separator)\n\n        if header is not None:\n            writer.writerow([header])\n\n        for point in self.points:\n            row = []\n            for coord in point:\n                if isinstance(coord, (list, tuple)):\n                    row.extend(map(str, coord))\n                else:\n                    row.append(str(coord))\n            writer.writerow(row)\n\n        return output.getvalue()\n\n# Example usage:\n# graph = Graph([(1, 2, 3), (4, 5, 6)])\n# print(graph.to_csv(header=\"Point\"))\n```"}}}
{"dataset": "coderEval", "task_id": "62b87b839a0c4fa8b80b35cb", "original_prompt": "def _get_err_indices(self, coord_name):\n\t\"\"\"\n\tFind all error indexes corresponding to coord_name.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _get_err_indices(self, coord_name):\n    err_indices = []\n    for i, name in enumerate(self.coord_names):\n        if name == coord_name:\n            err_indices.append(i)\n    return err_indices\n```"}}}
{"dataset": "coderEval", "task_id": "62b87b7e9a0c4fa8b80b35bc", "original_prompt": "def _update_context(self, context):\n\t\"\"\"\n\tUpdate *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _update_context(self, context):\n    if not hasattr(self, 'errors'):\n        self.errors = []\n\n    if not hasattr(context, 'error'):\n        context.error = {}\n\n    if not hasattr(context, 'value'):\n        context.value = {}\n\n    if not hasattr(context,'subcontexts'):\n        context.subcontexts = {}\n\n    # Update context.error with indices of errors\n    if hasattr(self, 'error_indices'):\n        for index in self.error_indices:\n            context.error.setdefault(\"x_low\", {}).setdefault(\"index\", []).append(index)\n\n    # Example of updating subcontexts\n    subcontext = {\"error\": {\"x_low\": {\"index\": 2}}}\n    context.subcontexts[\"example\"] = subcontext\n\n    # Ensure existing values in context.value and subcontexts are not removed\n    context.value.setdefault(\"E\", []).append(self.E)\n    context.value.setdefault(\"t\", []).append(self.t)\n    context.value.setdefault(\"error_E_low\", []).append(self.error_E_low)\n\n    # Assume self has attributes E, t, error_E_low for this example\n    if hasattr(self, 'E'):\n        context.value.setdefault(\"E\", []).append(self.E)\n    if hasattr(self, 't'):\n        context.value.setdefault(\"t\", []).append(self.t)\n    if hasattr(self, 'error_E_low'):\n        context.value.setdefault(\"error_E_low\", []).append(self.error_E_low)\n```"}}}
{"dataset": "coderEval", "task_id": "62b87b4f9a0c4fa8b80b3580", "original_prompt": "def integral(bins, edges):\n\t\"\"\"\n\tCalculate the area of the overall graph.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport numpy as np\n\ndef integral(bins, edges):\n    bin_widths = np.diff(edges)\n    area = np.sum(bins * bin_widths)\n    return area\n```"}}}
{"dataset": "coderEval", "task_id": "62b87b199a0c4fa8b80b354e", "original_prompt": "def is_fill_request_seq(seq):\n\t\"\"\"\n\tCheck whether seq can be converted to FillRequestSeq and bool is returned.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef is_fill_request_seq(seq):\n    try:\n        int(seq[0])\n        int(seq[1])\n        return len(seq) == 2 and isinstance(seq, list)\n    except (ValueError, IndexError):\n        return False\n```"}}}
{"dataset": "coderEval", "task_id": "62b87b099a0c4fa8b80b3538", "original_prompt": "def is_fill_request_el(obj):\n\t\"\"\"\n\tCheck whether the obj class has the fill and request attributes.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef is_fill_request_el(obj):\n    return hasattr(obj, 'fill') and hasattr(obj,'request')\n```"}}}
{"dataset": "coderEval", "task_id": "62b87af99a0c4fa8b80b3524", "original_prompt": "def is_run_el(obj):\n\t\"\"\"\n\tCheck whether the obj class has the run method.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef is_run_el(obj):\n    return hasattr(obj, 'run') and callable(getattr(obj, 'run'))\n```"}}}
{"dataset": "coderEval", "task_id": "62b87af69a0c4fa8b80b351a", "original_prompt": "def is_fill_compute_el(obj):\n\t\"\"\"\n\tCheck whether the obj class has the fill and compute methods.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef is_fill_compute_el(obj):\n    return hasattr(obj, 'fill') and hasattr(obj, 'compute') and callable(getattr(obj, 'fill')) and callable(getattr(obj, 'compute'))\n```"}}}
{"dataset": "coderEval", "task_id": "62b87af19a0c4fa8b80b34f7", "original_prompt": "def difference(d1, d2, level=-1):\n\t\"\"\"\n\tReturn a dictionary with items from d1 not contained in d2.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef difference(d1, d2, level=-1):\n    result = {}\n    for k, v in d1.items():\n        if k not in d2:\n            result[k] = v\n        elif isinstance(v, dict) and isinstance(d2[k], dict):\n            nested_diff = difference(v, d2[k], level - 1)\n            if nested_diff:\n                result[k] = nested_diff\n        elif level!= 0:\n            if isinstance(v, list) and isinstance(d2[k], list):\n                nested_diff = [item for item in v if item not in d2[k]]\n                if nested_diff:\n                    result[k] = nested_diff\n            elif isinstance(v, set) and isinstance(d2[k], set):\n                nested_diff = v - d2[k]\n                if nested_diff:\n                    result[k] = nested_diff\n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "62b87af09a0c4fa8b80b34f1", "original_prompt": "def fill(self, coord, weight=1):\n\t\"\"\"\n\tFill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass Histogram:\n    def __init__(self, min_edge, max_edge, bins):\n        self.min_edge = min_edge\n        self.max_edge = max_edge\n        self.bins = bins\n        self.bin_width = (max_edge - min_edge) / bins\n        self.histogram = [0] * bins\n\n    def fill(self, coord, weight=1):\n        if self.min_edge <= coord < self.max_edge:\n            index = int((coord - self.min_edge) / self.bin_width)\n            self.histogram[index] += weight\n```\n\nThis code defines a `Histogram` class with a `fill` method that fills the histogram at a given coordinate with a specified weight, ignoring coordinates outside the histogram's edges."}}}
{"dataset": "coderEval", "task_id": "62b86aa3b4d922cb0e688d36", "original_prompt": "def _validate_labels(labels):\n\t\"\"\"\n\tCheck that keys and values in the given labels by validate_key() and validate_value().\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _validate_labels(labels):\n    def validate_key(key):\n        if not isinstance(key, str) or not key:\n            raise ValueError(\"Invalid key\")\n    \n    def validate_value(value):\n        if not isinstance(value, str):\n            raise ValueError(\"Invalid value\")\n    \n    for key, value in labels.items():\n        validate_key(key)\n        validate_value(value)\n```\n"}}}
{"dataset": "coderEval", "task_id": "62b86a9eb4d922cb0e688d25", "original_prompt": "def _get_resource_name_regex():\n\t\"\"\"\n\tReturn the regular expressions that are used to validate the name of the Krake resources\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport re\n\ndef _get_resource_name_regex():\n    return [\n        re.compile(r\"^[a-z]([-a-z0-9]*[a-z0-9])?$\"),\n        re.compile(r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"),\n        re.compile(r\"^[a-z]([-a-z0-9]*[a-z0-9])?(\\.[a-z]([-a-z0-9]*[a-z0-9])?)*$\")\n    ]\n```"}}}
{"dataset": "coderEval", "task_id": "62b86a4fb4d922cb0e688cf8", "original_prompt": "def validate_value(value):\n\t\"\"\"\n\tValidate the given value against the corresponding regular expression.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport re\n\ndef validate_value(value):\n    regex = r'^[a-zA-Z0-9_]+$'\n    return bool(re.match(regex, value))\n```"}}}
{"dataset": "coderEval", "task_id": "62b86a4fb4d922cb0e688cf7", "original_prompt": "def validate_key(key):\n\t\"\"\"\n\tValidate the given key against the corresponding regular expression.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport re\n\ndef validate_key(key):\n    pattern = r'^[A-Za-z0-9_-]{5,20}$'  # Example pattern\n    return bool(re.match(pattern, key))\n```"}}}
{"dataset": "coderEval", "task_id": "62b86a01b4d922cb0e688ccc", "original_prompt": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n\t\"\"\"\n\tThe values corresponding to different keys in the new dict are generated based on the value type (such as dict and list) in the manifest_dict file. Then new dictionary is returned.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's a Python function that meets your requirements:\n\n```python\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    result_dict = {}\n    \n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            result_dict[key] = generate_default_observer_schema_dict(value)\n        elif isinstance(value, list):\n            result_dict[key] = [generate_default_observer_schema_dict(item) if isinstance(item, dict) else {} for item in value]\n        else:\n            result_dict[key] = None\n\n        if first_level:\n            break\n\n    return result_dict\n```\n\nThis function recursively generates a dictionary based on the structure of `manifest_dict`, handling dictionaries and lists appropriately."}}}
{"dataset": "coderEval", "task_id": "62b869ebb4d922cb0e688cc6", "original_prompt": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n\t\"\"\"\n\tTogether with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code for the task described:\n\n```python\ndef update_last_applied_manifest_list_from_resp(last_applied_manifest, observer_schema, response):\n    if not observer_schema or not response:\n        return\n\n    for i, schema in enumerate(observer_schema):\n        if i < len(response):\n            if isinstance(schema, list):\n                if len(last_applied_manifest) <= i:\n                    last_applied_manifest.append([])\n\n                update_last_applied_manifest_list_from_resp(\n                    last_applied_manifest[i], schema, response[i]\n                )\n            else:\n                if len(last_applied_manifest) <= i:\n                    last_applied_manifest.append(None)\n\n                last_applied_manifest[i] = response[i]\n        else:\n            if len(last_applied_manifest) <= i:\n                last_applied_manifest.append(None)\n```\n\nThis function recursively updates `last_applied_manifest` based on `observer_schema` and `response`. It initializes values in `last_applied_manifest` if they are not already present."}}}
{"dataset": "coderEval", "task_id": "62b869eab4d922cb0e688cc5", "original_prompt": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n\t\"\"\"\n\tTogether with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response):\n    for field, schema in observer_schema.items():\n        if field not in last_applied_manifest:\n            if isinstance(schema, dict):\n                last_applied_manifest[field] = {}\n                update_last_applied_manifest_dict_from_resp(last_applied_manifest[field], schema, response.get(field, {}))\n            else:\n                last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], dict) and isinstance(schema, dict):\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[field], schema, response.get(field, {}))\n```"}}}
{"dataset": "coderEval", "task_id": "62b869eab4d922cb0e688cbf", "original_prompt": "def generate_default_observer_schema(app):\n\t\"\"\"\n\tGenerate the default observer schema for each Kubernetes resource present in ``spec.manifest`` for which a custom observer schema hasn't been specified.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code to generate a default observer schema for each Kubernetes resource present in `spec.manifest` for which a custom observer schema hasn't been specified:\n\n```python\ndef generate_default_observer_schema(app):\n    default_schema = {\n        \"type\": \"object\",\n        \"properties\": {\n            \"metadata\": {\n                \"type\": \"object\"\n            },\n            \"spec\": {\n                \"type\": \"object\"\n            }\n        },\n        \"required\": [\"metadata\", \"spec\"]\n    }\n\n    manifest_resources = app['spec']['manifest']\n    custom_schemas = app.get('spec', {}).get('custom_schemas', {})\n\n    for resource in manifest_resources:\n        resource_name = resource['metadata']['name']\n        if resource_name not in custom_schemas:\n            custom_schemas[resource_name] = default_schema\n\n    app['spec']['custom_schemas'] = custom_schemas\n```\n\nThis code assumes `app` is a dictionary-like object that contains the Kubernetes resource specifications and any custom schemas. It iterates through each resource in `spec.manifest`, checks if a custom schema is specified, and assigns a default schema if not."}}}
{"dataset": "coderEval", "task_id": "62b43427903eeb48555d3ea5", "original_prompt": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\"\"\"\n\tConvert sql using self._converter.convert\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom typing import Any, AnyStr, Dict, Sequence, Tuple, Union\n\nclass SQLFormatter:\n    def __init__(self, converter):\n        self._converter = converter\n\n    def format(self, sql: AnyStr, params: Union[Dict[Union[str, int], Any], Sequence[Any]]) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n        formatted_sql = self._converter.convert(sql)\n        return formatted_sql, params\n\n# Example usage:\n# converter = SomeConverter()  # Replace with actual converter implementation\n# formatter = SQLFormatter(converter)\n# formatted_sql, formatted_params = formatter.format(\"SELECT * FROM table WHERE id = :id\", {\"id\": 1})\n```\n\nThis code defines a `SQLFormatter` class with a `format` method that converts SQL using a converter object. The `format` method takes SQL and parameters, converts the SQL, and returns the converted SQL along with the original parameters."}}}
{"dataset": "coderEval", "task_id": "62b43428903eeb48555d3eaa", "original_prompt": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\"\"\"\n\tConvert sql using self._converter.convert_many\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's a Python function that matches your description:\n\n```python\nfrom typing import AnyStr, Union, Iterable, Dict, Sequence, Tuple, List\n\nclass Formatter:\n    def __init__(self, converter):\n        self._converter = converter\n\n    def formatmany(\n        self,\n        sql: AnyStr,\n        many_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]]\n    ) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n        formatted_sql = self._converter.convert_many(sql, many_params)\n        return formatted_sql, list(many_params)\n```\n\nThis function assumes you have a `converter` object with a `convert_many` method that handles the SQL formatting. Adjust the `converter` initialization as needed for your specific use case."}}}
{"dataset": "coderEval", "task_id": "62b45df05108cfac7f2109ce", "original_prompt": "def validate(self, path):\n\t\"\"\"\n\tReturns True if OCFL object at path or pyfs root, False otherwise.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\nfrom fs import open_fs\n\ndef validate(self, path):\n    ocfl_version_file = '.ocfl'\n    ocfl_version = '0.1'\n\n    try:\n        with open_fs(path) as fs:\n            if ocfl_version_file in fs.listdir('.'):\n                with fs.open(ocfl_version_file, 'r') as version_file:\n                    version = version_file.read().strip()\n                    return version == ocfl_version\n            return False\n    except Exception:\n        return False\n```"}}}
{"dataset": "coderEval", "task_id": "62b45df15108cfac7f2109dc", "original_prompt": "def status_str(self, prefix=''):\n\t\"\"\"\n\tReturn a string with visiting the sorted self.messages list, each visit add prefix and the element in the sorted self.messages list.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass Status:\n    def __init__(self, messages):\n        self.messages = messages\n\n    def status_str(self, prefix=''):\n        return '\\n'.join(f\"{prefix}{msg}\" for msg in sorted(self.messages))\n```"}}}
{"dataset": "coderEval", "task_id": "62b45df15108cfac7f2109dd", "original_prompt": "def status_str(self, prefix=''):\n\t\"\"\"\n\tReturn string representation with self.log.status_str, with optional prefix.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef status_str(self, prefix=''):\n    return f\"{prefix}{self.log.status_str()}\"\n```"}}}
{"dataset": "coderEval", "task_id": "62b45e135108cfac7f2109f4", "original_prompt": "def is_valid(self, identifier):\n\t\"\"\"\n\tReturn True if identifier is valid. In this base implementation, always return True.  (D)\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass Validator:\n    def is_valid(self, identifier):\n        return True\n```"}}}
{"dataset": "coderEval", "task_id": "62b45e145108cfac7f210a07", "original_prompt": "def validate(self, inventory, extract_spec_version=False):\n\t\"\"\"\n\tValidate a given inventory. If extract_spec_version is True then will look at the type value to determine the specification version. In the case that there is no type value or it isn't valid, then other tests will be based on the version given in self.spec_version. (D)\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        if 'type' in inventory and isinstance(inventory['type'], str):\n            spec_version = inventory['type']\n        else:\n            spec_version = self.spec_version\n    else:\n        spec_version = self.spec_version\n    \n    # Example validation logic based on spec_version\n    if spec_version == '1.0':\n        # Perform validation for version 1.0\n        return 'Valid for 1.0' if 'key1' in inventory else 'Invalid for 1.0'\n    elif spec_version == '2.0':\n        # Perform validation for version 2.0\n        return 'Valid for 2.0' if 'key2' in inventory else 'Invalid for 2.0'\n    else:\n        return 'Unknown specification version'\n```"}}}
{"dataset": "coderEval", "task_id": "62b45e145108cfac7f210a09", "original_prompt": "def check_digests_present_and_used(self, manifest_files, digests_used):\n\t\"\"\"\n\tCheck all digests in manifest that are needed are present and used. Return error() in the class.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        digests_in_manifest = manifest.get('digests', [])\n        for digest in digests_used:\n            if digest not in digests_in_manifest:\n                return self.error(f\"Digest {digest} is used but not present in manifest.\")\n    return None\n```"}}}
{"dataset": "coderEval", "task_id": "62b45e165108cfac7f210a16", "original_prompt": "def validate_as_prior_version(self, prior):\n\t\"\"\"\n\tCheck that prior is a valid prior version of the current inventory object. The input variable prior is also expected to be an InventoryValidator object and both self and prior inventories are assumed to have been checked for internal consistency. Return error() in the class.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass InventoryValidator:\n    def __init__(self, version, data):\n        self.version = version\n        self.data = data\n\n    def error(self):\n        return \"Invalid prior version\"\n\n    def validate_as_prior_version(self, prior):\n        if not isinstance(prior, InventoryValidator):\n            return self.error()\n        if prior.version >= self.version:\n            return self.error()\n        if prior.data!= {key: value for key, value in self.data.items() if key in prior.data and prior.data[key] == value}:\n            return self.error()\n        return None\n```\n\nThis code defines a class `InventoryValidator` with a method `validate_as_prior_version` that checks if a given `prior` inventory is a valid prior version of the current inventory. It returns an error message if the validation fails."}}}
{"dataset": "coderEval", "task_id": "62b45e165108cfac7f210a17", "original_prompt": "def get_logical_path_map(inventory, version):\n\t\"\"\"\n\tReturns the file paths of the states in the inventory in the dict type.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef get_logical_path_map(inventory, version):\n    path_map = {}\n    for item in inventory:\n        if item['version'] == version:\n            path_map[item['name']] = item['path']\n    return path_map\n```"}}}
{"dataset": "coderEval", "task_id": "62b45e175108cfac7f210a19", "original_prompt": "def validate_fixity(self, fixity, manifest_files):\n\t\"\"\"\n\tValidate fixity block in inventory. Check the structure of the fixity block and makes sure that only files listed in the manifest are referenced. Return error() in the class.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef validate_fixity(self, fixity, manifest_files):\n    if not isinstance(fixity, dict):\n        self.error(\"Fixity block must be a dictionary.\")\n        return\n\n    for file, checksums in fixity.items():\n        if not isinstance(checksums, dict):\n            self.error(f\"Fixity for {file} must be a dictionary of checksums.\")\n            return\n        \n        for algo, checksum in checksums.items():\n            if not isinstance(checksum, str):\n                self.error(f\"Checksum for {file} using {algo} must be a string.\")\n                return\n\n        if file not in manifest_files:\n            self.error(f\"File {file} in fixity block is not listed in the manifest.\")\n            return\n\n    return True\n```"}}}
{"dataset": "coderEval", "task_id": "62b463153879012d19481498", "original_prompt": "def files_list(path):\n\t\"\"\"\n\tReturn the files in given path.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n```"}}}
{"dataset": "coderEval", "task_id": "62b463153879012d1948149a", "original_prompt": "def _group_files_by_xml_filename(source, xmls, files):\n\t\"\"\"\n\tGroups files by xmls and returns data in dict format.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _group_files_by_xml_filename(source, xmls, files):\n    grouped_files = {}\n    for xml in xmls:\n        xml_filename = xml.split('/')[-1].split('.')[0]\n        grouped_files[xml_filename] = [file for file in files if any(xml_filename in file for xml in xmls)]\n    return grouped_files\n```"}}}
{"dataset": "coderEval", "task_id": "62b463153879012d1948149b", "original_prompt": "def match_file_by_prefix(prefix, file_path):\n\t\"\"\"\n\tGiven a filepath, return true if the basename of the filepath is startswith the given prefix plus \"-\" or the given prefix plus \".\"\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef match_file_by_prefix(prefix, file_path):\n    basename = os.path.basename(file_path)\n    return basename.startswith(prefix + \"-\") or basename.startswith(prefix + \".\")\n```"}}}
{"dataset": "coderEval", "task_id": "62b463153879012d1948149c", "original_prompt": "def select_filenames_by_prefix(prefix, files):\n\t\"\"\"\n\tFor each file in files, return all files taht match the given prefix\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef select_filenames_by_prefix(prefix, files):\n    return [file for file in files if file.startswith(prefix)]\n```"}}}
{"dataset": "coderEval", "task_id": "62b463153879012d1948149d", "original_prompt": "def _explore_folder(folder):\n\t\"\"\"\n\tGroups files in the given group by using _group_files_by_xml_filename.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\nfrom collections import defaultdict\n\ndef _group_files_by_xml_filename(files):\n    grouped = defaultdict(list)\n    for file in files:\n        base_name, ext = os.path.splitext(file)\n        if ext == '.xml':\n            base_name = base_name.replace('_xml', '')\n        grouped[base_name].append(file)\n    return grouped\n\ndef _explore_folder(folder):\n    files = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]\n    return _group_files_by_xml_filename(files)\n```"}}}
{"dataset": "coderEval", "task_id": "62b463153879012d1948149f", "original_prompt": "def _eval_file(prefix, file_path):\n\t\"\"\"\n\tIdentify the type of the given file. Return None if the file do not match the given prefix or the type of the file is xml. Return dict with the key of component_id, file_path if the type of the file is \"pdf\", return dict with the key of component_id, file_path, ftype, file_path if the type of the file is not \"pdf\".\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef _eval_file(prefix, file_path):\n    if not file_path.startswith(prefix) or file_path.endswith('.xml'):\n        return None\n\n    file_type = None\n    if file_path.endswith('.pdf'):\n        file_type = 'pdf'\n    else:\n        file_type = os.path.splitext(file_path)[-1].lower().strip('.')\n\n    component_id = os.path.basename(file_path).split('.')[0]\n\n    if file_type == 'pdf':\n        return {component_id: file_path}\n    else:\n        return {component_id: file_path, 'ftype': file_type, 'file_path': file_path}\n```"}}}
{"dataset": "coderEval", "task_id": "62b463153879012d194814a1", "original_prompt": "def add_rendition(self, lang, file_path):\n\t\"\"\"\n\tAssign the filepath invoke by filepath() in the class to \"lang\" in _renditions in the class.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass MyClass:\n    def __init__(self):\n        self._renditions = {}\n\n    def filepath(self):\n        # Assume this method returns the file path\n        return \"/path/to/file\"\n\n    def add_rendition(self, lang, file_path):\n        self._renditions[lang] = file_path or self.filepath()\n```"}}}
{"dataset": "coderEval", "task_id": "62b463163879012d194814a2", "original_prompt": "def add_asset(self, basename, file_path):\n\t\"\"\"\n\tAssign the filepath invoke by filepath() in the class to \"basename\" in _assets in the class.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass AssetManager:\n    def __init__(self):\n        self._assets = {}\n    \n    def filepath(self, basename):\n        # Example implementation, could be different\n        return f\"/path/to/assets/{basename}\"\n    \n    def add_asset(self, basename, file_path):\n        self._assets[basename] = file_path\n\n# Example usage:\n# manager = AssetManager()\n# manager.add_asset('example', 'example.jpg')\n# print(manager._assets)  # Output: {'example': 'example.jpg'}\n```"}}}
{"dataset": "coderEval", "task_id": "62b463163879012d194814a4", "original_prompt": "def _explore_zipfile(zip_path):\n\t\"\"\"\n\tGroups the given zip path by using _group_files_by_xml_filename.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\nfrom collections import defaultdict\nfrom zipfile import ZipFile\n\ndef _group_files_by_xml_filename(zip_path):\n    file_groups = defaultdict(list)\n    \n    with ZipFile(zip_path, 'r') as zip_ref:\n        for file_info in zip_ref.infolist():\n            if file_info.filename.endswith('.xml'):\n                base_name = os.path.splitext(file_info.filename)[0]\n                file_groups[base_name].append(file_info.filename)\n    \n    return file_groups\n\ndef _explore_zipfile(zip_path):\n    return _group_files_by_xml_filename(zip_path)\n```"}}}
{"dataset": "coderEval", "task_id": "62b463163879012d194814a6", "original_prompt": "def files_list_from_zipfile(zip_path):\n\t\"\"\"\n\tReturn the files in the given zip path.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport zipfile\n\ndef files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        return zip_ref.namelist()\n```"}}}
{"dataset": "coderEval", "task_id": "62b4631b3879012d194814dd", "original_prompt": "def fix_namespace_prefix_w(content):\n\t\"\"\"\n\tReplace \"w:st=\" in content with \"w-st=\".\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef fix_namespace_prefix_w(content):\n    return content.replace(\"w:st=\", \"w-st=\")\n```"}}}
{"dataset": "coderEval", "task_id": "62b463283879012d1948153d", "original_prompt": "def match_pubdate(node, pubdate_xpaths):\n\t\"\"\"\n\tFor the given node, returns the first match in the pubdate_xpaths list.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom lxml import etree\n\ndef match_pubdate(node, pubdate_xpaths):\n    for xpath in pubdate_xpaths:\n        result = node.xpath(xpath)\n        if result:\n            return result[0]\n    return None\n```"}}}
{"dataset": "coderEval", "task_id": "62b463303879012d19481579", "original_prompt": "def _extract_number_and_supplment_from_issue_element(issue):\n\t\"\"\"\n\tReturn the possible values of number and sup from the contents of issue.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _extract_number_and_supplment_from_issue_element(issue):\n    import re\n    number_match = re.search(r'\\b(\\d+)\\b', issue)\n    sup_match = re.search(r'\\(suppl\\.\\s*(\\d+)\\)', issue, re.IGNORECASE)\n    number = int(number_match.group(1)) if number_match else None\n    sup = int(sup_match.group(1)) if sup_match else None\n    return number, sup\n```"}}}
{"dataset": "coderEval", "task_id": "62b46740d2f69a53b466171a", "original_prompt": "def pretty(self, indent=0, debug=False):\n\t\"\"\"\n\tReturn a pretty formatted representation of self. obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj) return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass YourClass:\n    def pretty(self, indent=0, debug=False):\n        obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n        debug_details = f\"debug=True, \" if debug else \"\"\n        return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n\n    def __init__(self, obj):\n        self.obj = obj\n```"}}}
{"dataset": "coderEval", "task_id": "62b46746d2f69a53b4661722", "original_prompt": "def absorb(self, args):\n\t\"\"\"\n\tGiven an `args` sequence of expressions, return a new list of expression applying absorption.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass ExpressionProcessor:\n    def absorb(self, args):\n        absorbed = []\n        for expr in args:\n            if isinstance(expr, tuple) and len(expr) == 2:\n                a, b = expr\n                if isinstance(a, str) and isinstance(b, str):\n                    if a == '0':\n                        absorbed.append(b)\n                    elif b == '0':\n                        absorbed.append(a)\n                    elif a == '1' and b == '0':\n                        absorbed.append('0')\n                    elif a == '0' and b == '1':\n                        absorbed.append('0')\n                    elif a == b:\n                        absorbed.append(a)\n                    else:\n                        absorbed.append(expr)\n                else:\n                    absorbed.append(expr)\n            else:\n                absorbed.append(expr)\n        return absorbed\n```"}}}
{"dataset": "coderEval", "task_id": "62b86707b4d922cb0e688c2a", "original_prompt": "def on(self, hook):\n\t\"\"\"\n\tReturn a decorator function to add a new handler to the \"hook\" in the registry in the class.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass HookRegistry:\n    def __init__(self):\n        self._registry = {}\n\n    def on(self, hook):\n        def decorator(func):\n            if hook not in self._registry:\n                self._registry[hook] = []\n            self._registry[hook].append(func)\n            return func\n        return decorator\n\n# Example usage\nregistry = HookRegistry()\n\n@registry.on('event1')\ndef handler1():\n    print(\"Handler 1 triggered\")\n\n@registry.on('event1')\ndef handler2():\n    print(\"Handler 2 triggered\")\n\n@registry.on('event2')\ndef handler3():\n    print(\"Handler 3 triggered\")\n\n# Trigger handlers for 'event1'\nfor func in registry._registry['event1']:\n    func()\n\n# Trigger handlers for 'event2'\nfor func in registry._registry['event2']:\n    func()\n```"}}}
{"dataset": "coderEval", "task_id": "62b86729b4d922cb0e688c2f", "original_prompt": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n\t\"\"\"\n\tCreates a configuration with some simple parameters, the key parameters contains \"tls\", \"authentication\", \"authorization\", \"etcd\", \"docs\", and \"log\".\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"tls\": {\n            \"enabled\": True,\n            \"cert_file\": f\"/etc/tls/{user}_cert.pem\",\n            \"key_file\": f\"/etc/tls/{user}_key.pem\"\n        },\n        \"authentication\": {\n            \"method\": \"password\",\n            \"server\": \"auth-server.example.com\",\n            \"port\": 8080\n        },\n        \"authorization\": {\n            \"enabled\": True,\n            \"policy_file\": f\"/etc/authz/{user}_policy.json\"\n        },\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"timeout\": 5\n        },\n        \"docs\": {\n            \"url\": \"https://docs.example.com\"\n        },\n        \"log\": {\n            \"level\": \"info\",\n            \"file\": f\"/var/log/{user}_app.log\"\n        }\n    }\n    return config\n```"}}}
{"dataset": "coderEval", "task_id": "62b8a4a4755ee91dce50a3d2", "original_prompt": "def _fromutc(self, dt):\n\t\"\"\"\n\tGiven a timezone datetime in a given timezone, calculates a timezone datetime in a new timezone.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom datetime import datetime, timedelta, timezone\n\nclass TimezoneConverter:\n    def __init__(self, target_tz_offset):\n        self.target_tz_offset = target_tz_offset\n\n    def _fromutc(self, dt):\n        if dt.tzinfo is None or dt.tzinfo.utcoffset(dt) is None:\n            raise ValueError(\"The datetime must be timezone aware.\")\n\n        # Calculate the current UTC offset\n        current_offset = dt.tzinfo.utcoffset(dt)\n\n        # Calculate the target timezone offset\n        target_offset = timedelta(hours=self.target_tz_offset)\n\n        # Calculate the difference between the current timezone and the target timezone\n        offset_difference = target_offset - current_offset\n\n        # Apply the offset difference to the given datetime\n        new_dt = dt + offset_difference\n\n        # Set the new timezone information\n        new_dt = new_dt.replace(tzinfo=timezone(target_offset))\n\n        return new_dt\n\n# Example usage\nconverter = TimezoneConverter(target_tz_offset=-5)  # Convert to EST\nutc_dt = datetime(2023, 10, 1, 12, 0, tzinfo=timezone.utc)\nconverted_dt = converter._fromutc(utc_dt)\nprint(converted_dt)\n```"}}}
{"dataset": "coderEval", "task_id": "62b8982f755ee91dce50a241", "original_prompt": "def normalized(self):\n\t\"\"\"\n\tNormalize all units of time to integers.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass TimeNormalizer:\n    def __init__(self, seconds=0, minutes=0, hours=0):\n        self.seconds = seconds\n        self.minutes = minutes\n        self.hours = hours\n\n    def normalized(self):\n        total_seconds = self.seconds + self.minutes * 60 + self.hours * 3600\n        normalized_hours = total_seconds // 3600\n        total_seconds %= 3600\n        normalized_minutes = total_seconds // 60\n        normalized_seconds = total_seconds % 60\n        return normalized_hours, normalized_minutes, normalized_seconds\n\n# Example usage:\n# tn = TimeNormalizer(seconds=3661, minutes=1, hours=2)\n# print(tn.normalized())  # Output: (3, 1, 1)\n```"}}}
{"dataset": "coderEval", "task_id": "62b89640755ee91dce50a114", "original_prompt": "def tzname_in_python2(namefunc):\n\t\"\"\"\n\tChange unicode output into bytestrings in Python 2\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport sys\n\ndef tzname_in_python2(namefunc):\n    if sys.version_info[0] < 3:\n        def wrapper():\n            result = namefunc()\n            if isinstance(result, unicode):\n                return result.encode('utf-8')\n            return result\n        return wrapper\n    return namefunc\n```"}}}
{"dataset": "coderEval", "task_id": "62b87d24d292efb640a55670", "original_prompt": "def get_versions():\n\t\"\"\"\n\tObtains the version information. If the version information cannot be obtained, the default value is returned.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef get_versions():\n    version_info = os.getenv('VERSION_INFO', 'default-value')\n    return version_info\n```"}}}
{"dataset": "coderEval", "task_id": "62b87d24d292efb640a5566f", "original_prompt": "def render(pieces, style):\n\t\"\"\"\n\tInput pieces and a style, render the pieces to the corresponding style.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef render(pieces, style):\n    if style == 'uppercase':\n        return [piece.upper() for piece in pieces]\n    elif style == 'lowercase':\n        return [piece.lower() for piece in pieces]\n    elif style == 'title':\n        return [piece.title() for piece in pieces]\n    elif style =='reverse':\n        return [piece[::-1] for piece in pieces]\n    else:\n        return pieces\n```"}}}
{"dataset": "coderEval", "task_id": "62b87d24d292efb640a5566d", "original_prompt": "def plus_or_dot(pieces):\n\t\"\"\"\n\tReturn \".\" If the closet-tag of the pieces contains \"+\", otherwise, return \"+\".\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef plus_or_dot(pieces):\n    closest_tag = pieces[-1]\n    if \"+\" in closest_tag:\n        return \".\"\n    return \"+\"\n```"}}}
{"dataset": "coderEval", "task_id": "62b87d23d292efb640a5566b", "original_prompt": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n\t\"\"\"\n\tCall the given command(s).\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's a Python function that implements the described task. This function uses the `subprocess` module to execute shell commands with the specified parameters.\n\n```python\nimport os\nimport subprocess\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    \n    full_command = commands + args\n    stderr_option = subprocess.STDOUT if hide_stderr else subprocess.PIPE\n\n    try:\n        process = subprocess.Popen(\n            full_command,\n            cwd=cwd,\n            stdout=subprocess.PIPE,\n            stderr=stderr_option,\n            env=env\n        )\n        output, _ = process.communicate()\n        if verbose:\n            print(output.decode())\n        return process.returncode\n    except Exception as e:\n        if verbose:\n            print(f\"An error occurred: {e}\")\n        return -1\n```\n\nThis function takes a list of commands and arguments, along with optional parameters for the working directory, verbosity, whether to hide stderr, and environment variables. It executes the command and returns the process's return code. If `verbose` is `True`, it will print the output."}}}
{"dataset": "coderEval", "task_id": "62b87d23d292efb640a55668", "original_prompt": "def get_config():\n\t\"\"\"\n\tReturn a new VersioneerConfig() and set various attribute of it.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom versioneer import VersioneerConfig\n\ndef get_config():\n    config = VersioneerConfig()\n    config.VCS = \"git\"\n    config.style = \"pep440\"\n    config.versionfile_source = \"src/_version.py\"\n    config.tag_prefix = \"\"\n    config.parentdir_prefix = \"release-\"\n    config.verbose = True\n    return config\n```"}}}
{"dataset": "coderEval", "task_id": "62b87d23d292efb640a55667", "original_prompt": "def register_vcs_handler(vcs, method):\n\t\"\"\"\n\tCreate decorator to mark a method as the handler of a object\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef register_vcs_handler(vcs, method):\n    def decorator(func):\n        setattr(vcs, method, func)\n        return func\n    return decorator\n\n# Example usage:\nclass VCS:\n    pass\n\nvcs_instance = VCS()\n\n@register_vcs_handler(vcs_instance, 'commit')\ndef commit_changes():\n    print(\"Changes committed\")\n\n# Now, vcs_instance.commit() will call commit_changes\nvcs_instance.commit()\n```"}}}
{"dataset": "coderEval", "task_id": "62b45e945108cfac7f210a4a", "original_prompt": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\t\"\"\"\n\tValidate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n\n    for root in self.roots:\n        for obj in root.objects:\n            num_objects += 1\n            is_valid = True\n\n            if validate_objects:\n                if not self.validate_object(obj):\n                    is_valid = False\n                    if show_warnings:\n                        print(f\"Warning: Object {obj.id} is invalid.\")\n\n            if check_digests and is_valid:\n                if not self.check_object_digest(obj):\n                    is_valid = False\n                    if show_warnings:\n                        print(f\"Warning: Object {obj.id} has a digest mismatch.\")\n\n            if is_valid:\n                good_objects += 1\n\n    return num_objects, good_objects\n```"}}}
{"dataset": "coderEval", "task_id": "62b45e515108cfac7f210a3c", "original_prompt": "def initialize(self):\n\t\"\"\"\n\tCreate and initialize a new OCFL storage root.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code for the given task without docstrings and comments:\n\n```python\nimport os\nimport hashlib\nimport json\n\nclass OCFLStorageRoot:\n    def __init__(self, base_directory):\n        self.base_directory = base_directory\n        self.manifest_file = os.path.join(base_directory,'manifest.json')\n        self.inventory_file = os.path.join(base_directory, 'inventory.json')\n\n    def initialize(self):\n        if os.path.exists(self.base_directory):\n            raise FileExistsError(\"The base directory already exists.\")\n\n        os.makedirs(self.base_directory, exist_ok=True)\n\n        manifest = {\n            \"c\": \"0.0.1\",\n            \"m\": [\n                {\"type\": \"http://ocfl.io/spec/core/0.0.1#filesystem\", \"digest\": self.compute_digest(self.base_directory), \"roles\": [\"root\"]}\n            ]\n        }\n\n        inventory = {\n            \"0\": {\n                \"created\": \"2023-10-01T00:00:00Z\",\n                \"version\": \"0.0.1\",\n                \"message\": \"Initial OCFL storage root creation\"\n            }\n        }\n\n        with open(self.manifest_file, 'w') as f:\n            json.dump(manifest, f, indent=2)\n\n        with open(self.inventory_file, 'w') as f:\n            json.dump(inventory, f, indent=2)\n\n    def compute_digest(self, directory):\n        sha256 = hashlib.sha256()\n        for root, _, files in os.walk(directory):\n            for file in sorted(files):\n                file_path = os.path.join(root, file)\n                with open(file_path, 'rb') as f:\n                    while chunk := f.read(8192):\n                        sha256.update(chunk)\n        return sha256.hexdigest()\n```\n\nThis code defines a class `OCFLStorageRoot` with an `initialize` method that creates and initializes a new OCFL storage root, including manifest and inventory files."}}}
{"dataset": "coderEval", "task_id": "62b45e2eb89c9fd354170232", "original_prompt": "def next_version(version):\n\t\"\"\"\n\tGiven next version identifier following existing pattern\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef next_version(version):\n    major, minor, patch = map(int, version.split('.'))\n    patch += 1\n    if patch == 10:\n        patch = 0\n        minor += 1\n        if minor == 10:\n            minor = 0\n            major += 1\n    return f\"{major}.{minor}.{patch}\"\n```"}}}
{"dataset": "coderEval", "task_id": "62b45e23e0d4551b0392c90a", "original_prompt": "def validate_version_inventories(self, version_dirs):\n\t\"\"\"\n\tEach version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\nimport hashlib\n\nclass VersionValidator:\n    def __init__(self, base_dir):\n        self.base_dir = base_dir\n        self.digest_mismatches = {}\n\n    def validate_version_inventories(self, version_dirs):\n        root_inventory_path = os.path.join(self.base_dir, 'inventory.json')\n        with open(root_inventory_path, 'r') as file:\n            root_inventory = json.load(file)\n\n        for i, version in enumerate(version_dirs, start=1):\n            version_dir_path = os.path.join(self.base_dir, version)\n            inventory_path = os.path.join(version_dir_path, 'inventory.json')\n\n            if not os.path.exists(inventory_path):\n                raise FileNotFoundError(f\"Inventory not found for version {i}\")\n\n            with open(inventory_path, 'r') as file:\n                version_inventory = json.load(file)\n\n            for file_key, file_info in version_inventory.items():\n                if file_key in root_inventory:\n                    root_digest = root_inventory[file_key]['digest']\n                    version_digest = file_info['digest']\n\n                    if root_digest!= version_digest:\n                        if file_key not in self.digest_mismatches:\n                            self.digest_mismatches[file_key] = []\n                        self.digest_mismatches[file_key].append((i, version_digest))\n\n        return self.digest_mismatches\n```"}}}
{"dataset": "coderEval", "task_id": "62b45e21e0d4551b0392c8ed", "original_prompt": "def find_path_type(path):\n\t\"\"\"\n\tReturn a string indicating the type of thing at the given path\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef find_path_type(path):\n    if not os.path.exists(path):\n        return \"Path does not exist\"\n    \n    if os.path.isfile(path):\n        return \"File\"\n    elif os.path.isdir(path):\n        return \"Directory\"\n    elif os.path.islink(path):\n        return \"Symbolic link\"\n    else:\n        return \"Special file\"\n```"}}}
{"dataset": "coderEval", "task_id": "62b45b396decaeff903e1001", "original_prompt": "def amend_bzparams(self, params, bug_ids):\n\t\"\"\"\n\tAmend the Bugzilla params\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef amend_bzparams(self, params, bug_ids):\n    if 'ids' in params:\n        params['ids'] += ',' + ','.join(map(str, bug_ids))\n    else:\n        params['ids'] = ','.join(map(str, bug_ids))\n```"}}}
{"dataset": "coderEval", "task_id": "62b4567ed7d32e5b55cc83d9", "original_prompt": "def deep_merge_nodes(nodes):\n\t\"\"\"\n\tMerge any node values corresponding to duplicate keys and return the result. If there are colliding keys with non-MappingNode values, the last of the values remains.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef deep_merge_nodes(nodes):\n    merged = {}\n    for node in nodes:\n        for key, value in node.items():\n            if key in merged:\n                if isinstance(merged[key], dict) and isinstance(value, dict):\n                    merged[key] = deep_merge_nodes([merged[key], value])\n                else:\n                    merged[key] = value\n            else:\n                merged[key] = value\n    return merged\n```"}}}
{"dataset": "coderEval", "task_id": "62b4567ad7d32e5b55cc83af", "original_prompt": "def parse_arguments(*arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return  them as an ArgumentParser instance\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport argparse\n\ndef parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    for arg in arguments:\n        parser.add_argument(*arg)\n    return parser.parse_args()\n```"}}}
{"dataset": "coderEval", "task_id": "62b45679d7d32e5b55cc83a9", "original_prompt": "def parser_flags(parser):\n\t\"\"\"\n\tGiven an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport argparse\n\ndef parser_flags(parser):\n    return''.join(f\"--{arg.dest}\" for arg in parser._actions if arg.option_strings)\n```"}}}
{"dataset": "coderEval", "task_id": "62b45665d7d32e5b55cc8365", "original_prompt": "def parse_arguments(*unparsed_arguments):\n\t\"\"\"\n\tParses parameters and returns them as dict maps\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport sys\nimport argparse\n\ndef parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-a', '--argument1', type=str, help='Description for argument1')\n    parser.add_argument('-b', '--argument2', type=int, help='Description for argument2')\n    parser.add_argument('-c', '--argument3', action='store_true', help='Description for argument3')\n    # Add more arguments as needed\n\n    args = parser.parse_args(unparsed_arguments if unparsed_arguments else sys.argv[1:])\n    return vars(args)\n```"}}}
{"dataset": "coderEval", "task_id": "62b45665d7d32e5b55cc8364", "original_prompt": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n\t\"\"\"\n\tGiven a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code for the specified task:\n\n```python\nimport argparse\n\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_results = {}\n    remaining_args = unparsed_arguments[:]\n\n    for subparser_name, subparser in subparsers.items():\n        try:\n            # Attempt to parse the arguments with the current subparser\n            parsed_namespace, remaining_args = subparser.parse_known_args(remaining_args)\n            parsed_results[subparser_name] = parsed_namespace\n        except SystemExit:\n            # If parsing fails, continue with the next subparser\n            continue\n\n    return parsed_results, remaining_args\n```\n\nThis function attempts to parse the arguments using each subparser in the provided dictionary. It returns a dictionary mapping subparser names to their parsed argument namespaces and a list of arguments not claimed by any subparser."}}}
{"dataset": "coderEval", "task_id": "62b45665d7d32e5b55cc8363", "original_prompt": "def make_parsers():\n\t\"\"\"\n\tBuild a parser and its subparsers and return them as a tuple.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's a Python function that creates a parser and its subparsers using the `argparse` module:\n\n```python\nimport argparse\n\ndef make_parsers():\n    parser = argparse.ArgumentParser(description='Main parser')\n    subparsers = parser.add_subparsers(dest='command')\n\n    # Example subparser 1\n    parser_a = subparsers.add_parser('command_a', help='Subcommand A help')\n    parser_a.add_argument('--option_a', type=int, help='Option A for command_a')\n\n    # Example subparser 2\n    parser_b = subparsers.add_parser('command_b', help='Subcommand B help')\n    parser_b.add_argument('--option_b', type=str, help='Option B for command_b')\n\n    return parser, subparsers\n```\n\nThis function sets up a main parser with two subparsers, each with its own options."}}}
{"dataset": "coderEval", "task_id": "62b438ba66fea644fe22cca2", "original_prompt": "def deep_merge_nodes(nodes):\n\t\"\"\"\n\tmerge any node values corresponding to duplicate keys and return the result. If there are colliding keys with non-MappingNode values, the last of the values remains.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom collections.abc import Mapping\n\ndef deep_merge_nodes(nodes):\n    def merge(d1, d2):\n        for k, v in d2.items():\n            if k in d1 and isinstance(d1[k], Mapping) and isinstance(v, Mapping):\n                merge(d1[k], v)\n            else:\n                d1[k] = v\n        return d1\n\n    result = {}\n    for node in nodes:\n        result = merge(result, node)\n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "62b438b666fea644fe22cc78", "original_prompt": "def parse_arguments(*arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return  them as an ArgumentParser instance\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code for the `parse_arguments` function that parses command-line arguments and returns an `ArgumentParser` instance:\n\n```python\nimport argparse\n\ndef parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    for arg in arguments:\n        name, value = arg.split('=')\n        if value.isdigit():\n            parser.add_argument(f'--{name}', type=int, default=int(value))\n        elif value.replace('.', '', 1).isdigit():\n            parser.add_argument(f'--{name}', type=float, default=float(value))\n        else:\n            parser.add_argument(f'--{name}', default=value)\n    return parser.parse_args()\n```\n\nThis function assumes that the input arguments are in the form of `name=value` strings. It dynamically adds arguments to the parser based on the type of the value."}}}
{"dataset": "coderEval", "task_id": "62b438b666fea644fe22cc72", "original_prompt": "def parser_flags(parser):\n\t\"\"\"\n\tGiven an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport argparse\n\ndef parser_flags(parser):\n    return''.join(f'--{action.dest}' for action in parser._actions if action.option_strings)\n```"}}}
{"dataset": "coderEval", "task_id": "62b438b566fea644fe22cc70", "original_prompt": "def bash_completion():\n\t\"\"\"\n\tProduce the borgmatic command by introspecting borgmatic's command-line argument parsers.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport argparse\nimport subprocess\nimport sys\n\ndef bash_completion():\n    def get_borgmatic_args():\n        parser = argparse.ArgumentParser(add_help=False)\n        borgmatic_process = subprocess.Popen(\n            [sys.executable, '-m', 'borgmatic'],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE\n        )\n        output, _ = borgmatic_process.communicate()\n        output = output.decode('utf-8')\n        parser = argparse.ArgumentParser()\n        parser.add_argument('args', nargs=argparse.REMAINDER)\n        borgmatic_args = parser.parse_args(output.split())\n        return borgmatic_args\n\n    borgmatic_args = get_borgmatic_args()\n    parser = argparse.ArgumentParser(add_help=False)\n    parser.add_argument('command', nargs=1)\n    parser.add_argument('args', nargs=argparse.REMAINDER)\n\n    command = sys.argv[1] if len(sys.argv) > 1 else ''\n    if command == 'borgmatic':\n        subparsers = parser.add_subparsers(dest='subcommand')\n        for action in borgmatic_args._actions:\n            if isinstance(action, argparse._SubParsersAction):\n                for choice, subparser in action.choices.items():\n                    subparser_parser = argparse.ArgumentParser(add_help=False)\n                    subparser._add_arguments(subparser_parser)\n                    subparsers.add_parser(choice, parents=[subparser_parser])\n\n    args, _ = parser.parse_known_args()\n\n    if args.subcommand:\n        subparser = subparsers.choices[args.subcommand]\n        subparser_parser = argparse.ArgumentParser(add_help=False)\n        subparser._add_arguments(subparser_parser)\n        subparser.complete = lambda prefix, **kwargs: [\n            option for option in subparser_parser._option_string_actions.keys()\n            if option.startswith(prefix)\n        ]\n        completions = subparser.complete('', **vars(args))\n        print('\\n'.join(completions))\n    else:\n        parser.print_help()\n\n# Example usage\nif __name__ == '__main__':\n    bash_completion()\n```"}}}
{"dataset": "coderEval", "task_id": "62b438a266fea644fe22cc2e", "original_prompt": "def parse_arguments(*unparsed_arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport argparse\n\ndef parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest='subparser_name')\n\n    # Example subparser\n    example_parser = subparsers.add_parser('example')\n    example_parser.add_argument('--option', type=str, help='An example option')\n\n    # Parse the arguments\n    parsed_args = parser.parse_args(unparsed_arguments)\n\n    # Convert Namespace to dict\n    args_dict = {argparse._get_action_name(action): getattr(parsed_args, action.dest) for action in parser._actions if action.dest!='subparser_name'}\n    args_dict['subparser_name'] = getattr(parsed_args,'subparser_name', 'global')\n\n    return {args_dict['subparser_name']: argparse.Namespace(**args_dict)}\n```"}}}
{"dataset": "coderEval", "task_id": "62b438a266fea644fe22cc2d", "original_prompt": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n\t\"\"\"\n\tGiven a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code for the described task:\n\n```python\nimport argparse\n\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_results = {}\n    remaining_arguments = unparsed_arguments[:]\n    \n    for subparser_name, subparser in subparsers.items():\n        try:\n            parsed_namespace, unparsed = subparser.parse_known_args(remaining_arguments)\n            parsed_results[subparser_name] = parsed_namespace\n            remaining_arguments = unparsed\n        except SystemExit:\n            pass\n\n    return parsed_results, remaining_arguments\n```\n\nThis function attempts to parse the arguments for each subparser and collects the parsed results, along with any remaining arguments that were not claimed by any subparser."}}}
{"dataset": "coderEval", "task_id": "62b438a266fea644fe22cc2c", "original_prompt": "def make_parsers():\n\t\"\"\"\n\tBuild a top-level parser and its subparsers and return them as a tuple.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport argparse\n\ndef make_parsers():\n    parser = argparse.ArgumentParser(description=\"Top-level parser\")\n    subparsers = parser.add_subparsers(dest=\"command\", help=\"Sub-command help\")\n\n    parser_a = subparsers.add_parser(\"command_a\", help=\"Command A help\")\n    parser_a.add_argument(\"arg1\", type=int, help=\"Argument 1 for command A\")\n\n    parser_b = subparsers.add_parser(\"command_b\", help=\"Command B help\")\n    parser_b.add_argument(\"--option\", type=str, help=\"Optional argument for command B\")\n\n    return parser, subparsers\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd5f", "original_prompt": "def paging(response, max_results):\n\t\"\"\"\n\tReturn every response with the length of max_results\n    Args:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\n    Returns:\n        Generator object with WAPI response split page by page.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd60", "original_prompt": "def size_to_bytes(size: str) -> int:\n\t\"\"\"\n\tConvert human readable file size to bytes\n\n    Args:\n            size: str, a string representing a human readable file size (eg: '500K')\n    Returns:\n            int: file size in bytes\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef size_to_bytes(size: str) -> int:\n    units = {\"B\": 1, \"K\": 1024, \"M\": 1024**2, \"G\": 1024**3, \"T\": 1024**4}\n    number, unit = float(size[:-1]), size[-1]\n    return int(number * units[unit.upper()])\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd61", "original_prompt": "def _dictsum(dicts):\n\t\"\"\"\n\tSum values with the same key in the dictionaries. And return a new dictionary.\n    Example:\n        given two dictionaries: dict1: {'a': 1, 'b': 2}, dict2: {'a': 5, 'b': 0}\n        return a dictionary: dic:{'a': 6, 'b': 2}\n    Returns: dict\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _dictsum(dicts):\n    result = {}\n    for d in dicts:\n        for key, value in d.items():\n            if key in result:\n                result[key] += value\n            else:\n                result[key] = value\n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd62", "original_prompt": "def _replace_url_args(url, url_args):\n\t\"\"\"\n\tReplace the value in url with the value in url_args\n    If url_args has a value, iterate over the keys and values from url_args.\n    Then replace the keys of the first parameter with values.\n    Returns: the modified url.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace(f\"{{{key}}}\", str(value))\n    return url\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd63", "original_prompt": "def is_none_string(val: any) -> bool:\n\t\"\"\"\n\tCheck if a string represents a None value.\n    Returns:\n        Return True if the type of val is string and the lowercase of val is equal to 'none', otherwise return False\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef is_none_string(val: any) -> bool:\n    return isinstance(val, str) and val.lower() == 'none'\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd64", "original_prompt": "def strip_root(path, root):\n\t\"\"\"\n\tRemove root from path. If fails, throw exception\n\n    Returns:\n        A path without root\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef strip_root(path, root):\n    if not path.startswith(root):\n        raise ValueError(\"Path does not start with the given root\")\n    return os.path.relpath(path, root)\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd65", "original_prompt": "def parser_flags(parser):\n\t\"\"\"\n\tGiven an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    Args:\n        script: argparse.ArgumentParser instance\n\n    Returns:\n        argument flags in a space-separated string\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport argparse\n\ndef parser_flags(parser):\n    flags = []\n    for action in parser._actions:\n        if action.option_strings:\n            flags.extend(action.option_strings)\n    return''.join(flags)\n\n# Example usage:\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-a', '--arg1', help='argument 1')\n    parser.add_argument('-b', '--arg2', help='argument 2')\n    print(parser_flags(parser))\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd66", "original_prompt": "def was_processed(processed, path_name, verbose):\n\t\"\"\"\n\tCheck if a file or directory has already been processed.\n\n    To prevent recursion, expand the path name to an absolution path\n    call this function with a set that will store all the entries and\n    the entry to test. If the entry is already in the set, report the issue\n    and return ``True``. Otherwise, add the entry to the set and return\n    ``False`` to allow the path to be processed.\n\n    Args:\n        processed: Set to store processed pathnames\n        path_name: Path to a directory or file\n        verbose: True if verbose output is requested\n\n    Returns:\n        True if it's already in the set. False if not.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef was_processed(processed, path_name, verbose):\n    absolute_path = os.path.abspath(path_name)\n    if absolute_path in processed:\n        if verbose:\n            print(f\"Already processed: {absolute_path}\")\n        return True\n    processed.add(absolute_path)\n    return False\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd67", "original_prompt": "def vertex3tuple(vertices):\n\t\"\"\"\n\tGet 3 points for each vertex of the polygon.\n    This will include the vertex and the 2 points on both sides of the vertex\n    If the subscript is out of bounds, take the value of index as 0\n    Args:\n        vertices: vertices to be converted\n\n    Returns:\n        A list where the elements of vertices represented by tuple\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef vertex3tuple(vertices):\n    n = len(vertices)\n    result = []\n    for i in range(n):\n        prev_index = (i - 1) % n\n        next_index = (i + 1) % n\n        result.append((vertices[prev_index], vertices[i], vertices[next_index]))\n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd68", "original_prompt": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n\t\"\"\"\n\tConvert a number to a string, using the given alphabet.\n    The number represents a short uuid.\n    The output has the most significant digit first.\n    @param number: Int value\n    @param alphabet : List with letters\n    @param padding : Optional with int value\n    @return  string value corresponded to int\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom typing import List, Optional\n\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if number == 0:\n        result = alphabet[0]\n    else:\n        base = len(alphabet)\n        result = ''\n        while number > 0:\n            number, remainder = divmod(number, base)\n            result = alphabet[remainder] + result\n    \n    if padding is not None and len(result) < padding:\n        result = result.rjust(padding, alphabet[0])\n\n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd69", "original_prompt": "def _replace_register(flow_params, register_number, register_value):\n\t\"\"\"\n\tReplace the value of flow_params[register_number] with flow_params[register_value] and delete flow_params[register_value]\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _replace_register(flow_params, register_number, register_value):\n    flow_params[register_number] = flow_params[register_value]\n    del flow_params[register_value]\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd6a", "original_prompt": "def replace_dots(value, arg):\n\t\"\"\"\n\tReplaces all values of '.' to arg from the given string\n    Args:\n        value: old string\n        arg: new string to replace '.'\n    Returns:\n        str, the replaced string\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef replace_dots(value, arg):\n    return value.replace('.', arg)\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd6b", "original_prompt": "def subclasses(cls):\n\t\"\"\"\n\tReturn all subclasses of a class, recursively\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef subclasses(cls):\n    result = set(cls.__subclasses__())\n    for subclass in cls.__subclasses__():\n        result.update(subclasses(subclass))\n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd6d", "original_prompt": "def string_to_int(string: str, alphabet: List[str]) -> int:\n\t\"\"\"\n\tConvert a string to a number, using the given alphabet.\n    :param string: a string consist of the letters in alphabet\n    :param alphabet: list of letters\n    :return: int, the corresponding number of the given string using the given transition rule.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom typing import List\n\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    base = len(alphabet)\n    result = 0\n    for char in string:\n        result = result * base + alphabet.index(char)\n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd6f", "original_prompt": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n\t\"\"\"\n\tGiven an url and a destination path, retrieve and extract .tar.gz archive which contains 'desc' file for each package\n\n        Args:\n            url: url of the .tar.gz archive to download\n            destination_path: the path on disk where to extract archive\n        Returns:\n                path where the archive is extracted to\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport requests\nfrom pathlib import Path\nimport tarfile\n\ndef get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url, stream=True)\n    temp_file = destination_path / 'archive.tar.gz'\n    \n    with open(temp_file, 'wb') as f:\n        for chunk in response.iter_content(chunk_size=8192):\n            f.write(chunk)\n    \n    with tarfile.open(temp_file, 'r:gz') as tar:\n        tar.extractall(path=destination_path)\n    \n    return destination_path\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd70", "original_prompt": "def os_is_mac():\n\t\"\"\"\n\tChecks if the os is macOS\n\n    :return: bool, True is macOS, otherwise False.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport platform\n\ndef os_is_mac():\n    return platform.system() == 'Darwin'\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd71", "original_prompt": "def regex_dict(item):\n\t\"\"\"\n\tConvert *.cpp keys to regex keys.\nGiven a dict where the keys are all filenames with wildcards,\nconvert only the keys into equivalent regexes and leave the values intact.\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport re\n\ndef regex_dict(item):\n    regex_item = {}\n    for key, value in item.items():\n        regex_key = key.replace('*', '.*').replace('?', '.')\n        regex_key = '^' + regex_key + '$'  # Ensure full-string match\n        regex_item[re.compile(regex_key)] = value\n    return regex_item\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd72", "original_prompt": "def unquote(name):\n\t\"\"\"\n\tRemove quote from the given name with regular expression.\n    Args:\n        name: input name\n    Returns:\n        name after removal\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport re\n\ndef unquote(name):\n    return re.sub(r'^\"|\"$', '', name)\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd73", "original_prompt": "def split(s, platform='this'):\n\t\"\"\"\n\tSplit the input str under given platform, return the splitting result\n    If platform equals 'this', auto-detect current platform.\n    If platform equals 1, use POSIX style.\n    If platform equals 0, use Windows/CMD style.\n    Args:\n        s: input str\n        platform: 'this' = auto from current platform; 1 = POSIX; 0 = Windows/CMD\n    Returns:\n        a list of splitting str\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\nimport re\n\ndef split(s, platform='this'):\n    if platform == 'this':\n        platform = 1 if os.name == 'posix' else 0\n    if platform == 1:\n        return re.split(r'(\\s+)', s)\n    elif platform == 0:\n        return re.split(r'(\\s+)', s.replace('\\\\', '\\\\\\\\'))\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd74", "original_prompt": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n\t\"\"\"\n\tGiven an existing archive_path, uncompress it.\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not exist.\n    @param archive_path : archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code for the task:\n\n```python\nfrom typing import Optional, Union\nfrom pathlib import Path\nimport tarfile\nimport zipfile\nimport os\n\ndef prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[Path, str] = \"/tmp\"\n) -> str:\n    tmp_path = Path(tmp_path)\n    repo_dir = tmp_path / \"repository\"\n    repo_dir.mkdir(exist_ok=True)\n\n    if archive_path.endswith(('.tar.gz', '.tar', '.tgz')):\n        with tarfile.open(archive_path, 'r:*') as archive:\n            archive.extractall(path=repo_dir)\n    elif archive_path.endswith(('.zip',)):\n        with zipfile.ZipFile(archive_path, 'r') as archive:\n            archive.extractall(path=repo_dir)\n    else:\n        raise ValueError(\"Unsupported archive format\")\n\n    extracted_files = list(repo_dir.iterdir())\n    if filename:\n        target_dir = repo_dir / filename\n        if target_dir.exists() and target_dir.is_dir():\n            extracted_files = [target_dir]\n        else:\n            extracted_files = [f for f in extracted_files if f.name == filename]\n    if not extracted_files:\n        raise FileNotFoundError(\"No valid directory found in the archive\")\n\n    repo_dir = extracted_files[0]\n    repo_url = f\"file://{repo_dir.resolve()}\"\n\n    return repo_url\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd75", "original_prompt": "def addignored(ignored):\n\t\"\"\"\n\tUse the git command to obtain the file names\u3002\n    Turn the file names into a list, sort the list for only ignored files\n    return those files as a single string with each filename separated by a comma.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport subprocess\n\ndef addignored(ignored):\n    process = subprocess.Popen(['git', 'ls-files', '--others', '--ignored', '--exclude-standard'], stdout=subprocess.PIPE)\n    stdout, _ = process.communicate()\n    files = stdout.decode().splitlines()\n    ignored_files = sorted([file for file in files if any(ig in file for ig in ignored)])\n    return ','.join(ignored_files)\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd76", "original_prompt": "def match(filename):\n\t\"\"\"\n\tCheck if the type of the given filename is 'doxyfile'\n\n    Args:\n        filename: filename to be check\n    Returns:\n        Return True if the type of the given filename in lower case is 'doxyfile'\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef match(filename):\n    return filename.lower() == 'doxyfile'\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4982e6aefcf4aabbd77", "original_prompt": "def parse_frequency(frequency):\n\t\"\"\"\n\tGiven a frequency string with a number and a unit of time, return a corresponding\n     datetime.timedelta instance.\n     If the frequency is None or \"always\", return None.\n     Raise ValueError if the given frequency cannot be parsed.\n     For instance, given \"3 timeunit\", return datetime.timedelta(timeunit=3)\n\n     @param frequency :  A frequency string \"number timeunit\"\n\n    @return str, the corresponding datetime\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom datetime import timedelta\n\ndef parse_frequency(frequency):\n    if frequency is None or frequency.lower() == \"always\":\n        return None\n\n    try:\n        number, timeunit = frequency.split()\n        number = int(number)\n        timeunit = timeunit.lower()\n\n        if timeunit == \"years\":\n            return timedelta(days=number * 365)\n        elif timeunit == \"months\":\n            return timedelta(days=number * 30)\n        elif timeunit == \"weeks\":\n            return timedelta(weeks=number)\n        elif timeunit == \"days\":\n            return timedelta(days=number)\n        elif timeunit == \"hours\":\n            return timedelta(hours=number)\n        elif timeunit == \"minutes\":\n            return timedelta(minutes=number)\n        elif timeunit == \"seconds\":\n            return timedelta(seconds=number)\n        else:\n            raise ValueError(\"Invalid time unit in frequency\")\n\n    except (ValueError, AttributeError):\n        raise ValueError(\"Invalid frequency format\")\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd78", "original_prompt": "def is_local(host):\n\t\"\"\"\n\tChecks if the host is the localhost,\n    the localhost include local IP, user name, local domain name, `localhost` and `127.0.0.1`\n\n    Args:\n        host: The hostname or ip\n\n    Returns:\n        True if the host is the localhost else False\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport socket\n\ndef is_local(host):\n    local_hosts = ['localhost', '127.0.0.1']\n    try:\n        host_ip = socket.gethostbyname(host)\n        if host_ip == '127.0.0.1':\n            return True\n        local_ips = socket.gethostbyname_ex(socket.gethostname())[2]\n        if host_ip in local_ips:\n            return True\n        if host in local_hosts:\n            return True\n    except socket.gaierror:\n        pass\n    return False\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd79", "original_prompt": "def make_find_paths(find_paths):\n\t\"\"\"\n\tGiven a sequence of path, transform all path into glob patterns. Pass through existing patterns untouched.\n\n    Args:\n        find_paths: sequence of path\n    Returns:\n        tuple of transformed path\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport fnmatch\nimport os\n\ndef make_find_paths(find_paths):\n    def transform_path(path):\n        if \"*\" in path or \"?\" in path or \"[\" in path:\n            return path\n        return fnmatch.translate(os.path.abspath(path))\n\n    return tuple(transform_path(path) for path in find_paths)\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd7a", "original_prompt": "def is_gitbash():\n\t\"\"\"\n\tCheck whether the current program is run in a Windows gitbash terminal\n\n    Returns:\n            boolean, True if gitbash else False\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef is_gitbash():\n    import os\n    return 'MINGW64' in os.environ.get('MSYSTEM', '') or 'MINGW32' in os.environ.get('MSYSTEM', '')\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd7b", "original_prompt": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\t\"\"\"\n\tGiven a rendered config YAML, write it out to target file.\n    But if the file already exists and overwrite is False,\n    abort before writing anything.\n    If the file does not exist, create it.\n    Write to the file otherwise.\n\n    Returns: None\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\nimport yaml\n\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if os.path.exists(config_filename) and not overwrite:\n        print(f\"File {config_filename} already exists and overwrite is False. Aborting.\")\n        return\n\n    with open(config_filename, 'w') as file:\n        yaml.dump(rendered_config, file)\n        os.chmod(config_filename, mode)\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd7c", "original_prompt": "def oneline(script, seperator=\" && \"):\n\t\"\"\"\n\tConvert a script to one line command with the given seperator.\n\n        Args:\n                script: str\n                separator: str\n        Returns:\n                str, the one-line command.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef oneline(script, separator=\" && \"):\n    return separator.join(line.strip() for line in script.splitlines() if line.strip())\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd7d", "original_prompt": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n\t\"\"\"\n\tRun a function in a sub-process\n\n    Args:\n            func: function, the function to be run. It must be in a module that is importable.\n            *args: str. Any additional command line arguments to be passed in\n                        the first argument to ``subprocess.run``.\n            extra_env: dict[str, str]. Any additional environment variables to be set for the subprocess.\n    Returns:\n            CompletedProcess instance\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport subprocess\nimport os\nimport multiprocessing\nfrom subprocess import CompletedProcess\n\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    def target(queue, func, args):\n        try:\n            result = func(*args)\n            queue.put((True, result))\n        except Exception as e:\n            queue.put((False, e))\n\n    queue = multiprocessing.Queue()\n    process = multiprocessing.Process(target=target, args=(queue, func, args))\n    process.start()\n    process.join(timeout)\n\n    if process.is_alive():\n        process.terminate()\n        process.join()\n        raise subprocess.TimeoutExpired(cmd=f\"{func.__name__} {args}\", timeout=timeout)\n\n    success, result = queue.get()\n\n    if not success:\n        raise result\n\n    if extra_env:\n        combined_env = os.environ.copy()\n        combined_env.update(extra_env)\n    else:\n        combined_env = None\n\n    completed_process = CompletedProcess(\n        args=(func.__name__, *args),\n        returncode=0 if success else 1,\n        stdout=result if success else None,\n        stderr=None if success else str(result),\n        env=combined_env\n    )\n\n    return completed_process\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd7e", "original_prompt": "def _resolve_string(matcher):\n\t\"\"\"\n\tGet the value from environment given a matcher containing a name and an optional default value in its group dict.\n    If the variable is not defined in environment and no default value is provided, an Error is raised.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef _resolve_string(matcher):\n    name = matcher['name']\n    default = matcher.get('default')\n    value = os.getenv(name, default)\n    if value is None:\n        raise ValueError(f\"Environment variable '{name}' is not set and no default value is provided.\")\n    return value\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd7f", "original_prompt": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n\t\"\"\"\n\tParse an image href into composite parts import urllib.\n\n    :param image_href: href of an image\n    :returns: a tuple of the form (image_id, netloc, use_ssl)\n    :raises ValueError:\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom typing import Tuple\nfrom urllib.parse import urlparse\n\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed_url = urlparse(image_href)\n    image_id = parsed_url.path.strip('/')\n    netloc = parsed_url.netloc\n    use_ssl = parsed_url.scheme == 'https'\n    return image_id, netloc, use_ssl\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd80", "original_prompt": "def remove_ending_os_sep(input_list):\n\t\"\"\"\n\tIf input list is None, return []\n    Iterate over a string list and remove trailing os seperator characters.\n    Each string is tested if its length is greater than one and if the last\n    character is the pathname seperator.\n    Returns:\n    A list after removing trailing os seperator characters.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    \n    result = []\n    for item in input_list:\n        if isinstance(item, str) and len(item) > 1 and item[-1] == os.sep:\n            result.append(item[:-1])\n        else:\n            result.append(item)\n    \n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd82", "original_prompt": "def get_pattern(pattern, strip=True):\n\t\"\"\"\n\tConvert a string to a regex pattern object\n\n    Args:\n            pattern: str or regex pattern object\n            strip: boolean, whether the spaces in the start/end will be stripped\n    Returns:\n            regex pattern object\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport re\n\ndef get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        if strip:\n            pattern = pattern.strip()\n        pattern = re.escape(pattern)\n    return re.compile(pattern)\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd83", "original_prompt": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n\t\"\"\"\n\tA list of command is given. Run the given command(s) with the given arguments use a subprocess. Return the running result (stdout and returncode)\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's a Python function that executes the described task using the `subprocess` module:\n\n```python\nimport subprocess\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    process = subprocess.Popen(\n        [commands] + args,\n        cwd=cwd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE if not hide_stderr else subprocess.STDOUT,\n        env=env\n    )\n    stdout, stderr = process.communicate()\n    if verbose:\n        print(stdout.decode())\n        if stderr:\n            print(stderr.decode())\n    return stdout.decode(), process.returncode\n```\n\nThis function takes a list of commands and arguments, executes them, and returns the standard output and return code. It also supports optional verbosity, hiding stderr, and setting a custom environment."}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd84", "original_prompt": "def is_ipv4(target):\n\t\"\"\"\n\tTest if IPv4 address or not.\n\n   Returns: Boolean, True if target is IPv4 address, else False.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef is_ipv4(target):\n    parts = target.split('.')\n    if len(parts)!= 4:\n        return False\n    for part in parts:\n        if not part.isdigit():\n            return False\n        num = int(part)\n        if num < 0 or num > 255 or (num > 0 and str(num)!= part):\n            return False\n    return True\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd85", "original_prompt": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n\t\"\"\"\n\t Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf)\n    will return a set of all roots of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class Object\n        roots: Optional list with set type\n    Return:\n        roots: a set with nodes\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom typing import Optional, Set\nfrom rdflib import URIRef, Graph, Node\n\ndef find_roots(graph: Graph, prop: URIRef, roots: Optional[Set[Node]] = None) -> Set[Node]:\n    if roots is None:\n        roots = set()\n    nodes = set(graph.subjects())\n    \n    for node in nodes:\n        if not any(graph.triples((node, prop, None))):\n            roots.add(node)\n    \n    return roots\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd86", "original_prompt": "def _dump_string(obj, dumper=None):\n\t\"\"\"\n\tGiven a python object and serialize it into a YAML stream\n\n    Args:\n        obj: python object\n\n    Returns:\n        YAML stream\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport yaml\n\ndef _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.Dumper\n    return yaml.dump(obj, Dumper=dumper)\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd87", "original_prompt": "def build_app_logger(name='app', logfile='app.log', debug=True):\n\t\"\"\"\n\tGeneral purpose application logger. Useful mainly for debugging\n    Args:\n        name: The name of logger\n        logfile: The log file need to save\n        debug: is need to debug\n\n    Returns:\n        Returns an instantiated logger object\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport logging\n\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    file_handler = logging.FileHandler(logfile)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    file_handler.setFormatter(formatter)\n\n    logger.addHandler(file_handler)\n\n    if debug:\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(formatter)\n        logger.addHandler(console_handler)\n\n    return logger\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd88", "original_prompt": "def make_array(shape, dtype=np.dtype(\"float32\")):\n\t\"\"\"\n\tReturns a 0-filled array of the given shape and type.\n\n        Args:\n                shape : tuple\n                    shape of the array to create\n                dtype : `numpy.dtype`\n                    data-type of the array to create\n        Return: array\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport numpy as np\n\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd89", "original_prompt": "def gaussian(x):\n\t\"\"\"\n\tCalculate Gaussian centered with u is 0.2 and sigma is 0.1.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport math\n\ndef gaussian(x):\n    u = 0.2\n    sigma = 0.1\n    return (1 / (sigma * math.sqrt(2 * math.pi))) * math.exp(-0.5 * ((x - u) / sigma) ** 2)\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd8a", "original_prompt": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n\t\"\"\"\n\tGiven a sequence of configuration filenames, load and validate each configuration file. If the configuration file\ncannot be read due to insufficient permissions or error parsing configuration file, the error log will\nbe recorded. Otherwise, return the results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\nimport logging\nimport json\n\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n    if overrides is None:\n        overrides = {}\n    \n    config_dict = {}\n    error_records = []\n\n    for filename in config_filenames:\n        try:\n            with open(filename, 'r') as file:\n                config_data = file.read()\n            \n            if resolve_env:\n                config_data = os.path.expandvars(config_data)\n            \n            config = json.loads(config_data)\n            \n            # Apply overrides\n            for key, value in overrides.items():\n                config[key] = value\n            \n            config_dict[filename] = config\n        \n        except (PermissionError, FileNotFoundError) as e:\n            error_records.append(logging.LogRecord(name=\"\", level=logging.ERROR, pathname=\"\", lineno=0, msg=str(e), args=(), exc_info=None))\n        \n        except json.JSONDecodeError as e:\n            error_records.append(logging.LogRecord(name=\"\", level=logging.ERROR, pathname=filename, lineno=0, msg=str(e), args=(), exc_info=None))\n        \n        except Exception as e:\n            error_records.append(logging.LogRecord(name=\"\", level=logging.ERROR, pathname=filename, lineno=0, msg=str(e), args=(), exc_info=None))\n    \n    return config_dict, error_records\n```"}}}
{"dataset": "coderEval", "task_id": "62ece4992e6aefcf4aabbd8b", "original_prompt": "def force_string(obj):\n\t\"\"\"\n\tForce decoding obj with 'utf-8' if it is a numpy.bytes or bytes\n\n    Args:\n        obj: consistency config\n\n    Returns:\n        returns the bytes object corresponding to `obj` in case it is a string using UTF-8 else return `obj`\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport numpy as np\n\ndef force_string(obj):\n    if isinstance(obj, np.bytes_):\n        return obj.decode('utf-8')\n    elif isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n```"}}}
{"dataset": "coderEval", "task_id": "62e60723d76274f8a4026b76", "original_prompt": "def from_ticks(cls, ticks, tz=None):\n\t\"\"\"\n\tCreate a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom datetime import timedelta, timezone\n\nclass Time:\n    def __init__(self, hour, minute, second, microsecond, tzinfo=None):\n        self.hour = hour\n        self.minute = minute\n        self.second = second\n        self.microsecond = microsecond\n        self.tzinfo = tzinfo\n\n    @classmethod\n    def from_ticks(cls, ticks, tz=None):\n        if not (0 <= ticks < 86400000000000):\n            raise ValueError(\"ticks is out of bounds (0 <= ticks < 86400000000000)\")\n        \n        total_seconds = ticks // 1_000_000_000\n        microseconds = (ticks % 1_000_000_000) * 1000\n\n        td = timedelta(seconds=total_seconds, microseconds=microseconds)\n        time_of_day = td if td < timedelta(days=1) else td - timedelta(days=1)\n\n        hour = time_of_day.seconds // 3600\n        minute = (time_of_day.seconds % 3600) // 60\n        second = time_of_day.seconds % 60\n\n        return cls(hour, minute, second, time_of_day.microseconds, tz)\n```\n\nThis code defines a `Time` class with a `from_ticks` class method, which creates a `Time` instance from a given number of nanoseconds since midnight. The method checks if the `ticks` value is within bounds and raises a `ValueError` if not. It calculates the time of day by converting nanoseconds to seconds and microseconds, then constructs a `Time` object with the appropriate time components. The optional `tz` parameter allows setting a timezone, though it's not utilized further in this snippet."}}}
{"dataset": "coderEval", "task_id": "62e60873d76274f8a4026bd8", "original_prompt": "def protocol_handlers(cls, protocol_version=None):\n\t\"\"\"\n\tReturn a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass BoltProtocolHandler:\n    @classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        available_versions = {\n            (3, 5): \"HandlerV3_5\",\n            (4, 0): \"HandlerV4_0\",\n            (4, 1): \"HandlerV4_1\",\n            (4, 2): \"HandlerV4_2\",\n        }\n\n        if protocol_version is not None:\n            if not isinstance(protocol_version, tuple):\n                raise TypeError(\"Protocol version must be a tuple.\")\n            return {protocol_version: available_versions[protocol_version]} if protocol_version in available_versions else {}\n\n        return available_versions\n```"}}}
{"dataset": "coderEval", "task_id": "62e60e3bd76274f8a4026d1a", "original_prompt": "def from_raw_values(cls, values):\n\t\"\"\"\n\tCreate a Bookmarks object from a list of raw bookmark string values.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass Bookmarks:\n    def __init__(self, bookmarks):\n        self.bookmarks = bookmarks\n\n    @classmethod\n    def from_raw_values(cls, values):\n        processed_values = [value.strip() for value in values if value.strip()]\n        return cls(processed_values)\n```\n\nThis Python code defines a `Bookmarks` class with a class method `from_raw_values` that takes a list of raw bookmark strings and returns an instance of `Bookmarks` with the processed values."}}}
{"dataset": "coderEval", "task_id": "62b87b199a0c4fa8b80b354c", "original_prompt": "def _get_seq_with_type(seq, bufsize=None):\n\t\"\"\"\n\tReturn a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _get_seq_with_type(seq, bufsize=None):\n    if hasattr(seq, '__getitem__') and not isinstance(seq, (str, bytes)):\n        seq_type = type(seq)\n    else:\n        seq = list(seq)\n        seq_type = list\n    return seq, seq_type\n```"}}}
{"dataset": "coderEval", "task_id": "62b87b4f9a0c4fa8b80b3581", "original_prompt": "def scale(self, other=None, recompute=False):\n\t\"\"\"\n\tCompute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass Histogram:\n    def __init__(self):\n        self.scale = None\n        self.data = []  # Placeholder for histogram data\n\n    def compute_scale(self):\n        # Assuming scale is the sum of histogram data for simplicity\n        return sum(self.data)\n\n    def scale(self, other=None, recompute=False):\n        if other is None:\n            if self.scale is None or recompute:\n                self.scale = self.compute_scale()\n            return self.scale\n        elif isinstance(other, (float, int)):\n            if self.scale is not None and self.scale!= 0:\n                self.scale = other / self.scale\n            elif self.scale == 0:\n                raise ValueError(\"Histograms with scale equal to zero can't be rescaled.\")\n            else:\n                self.scale = other\n        else:\n            raise TypeError(\"Other must be None or a float/int.\")\n```"}}}
{"dataset": "coderEval", "task_id": "62b87b519a0c4fa8b80b3583", "original_prompt": "def scale(self, other=None):\n\t\"\"\"\n\tGet or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass LenaValueError(Exception):\n    pass\n\nclass Graph:\n    def __init__(self, scale=None):\n        self.scale = scale\n        self.fields = {'x': [1], 'y': [2], 'z': [3]}  # Example fields with coordinates\n\n    def scale(self, other=None):\n        if other is None:\n            return self.scale\n\n        if self.scale is None or self.scale == 0:\n            raise LenaValueError(\"Cannot rescale graph with unknown or zero scale\")\n\n        if 'x' in self.fields and 'y' in self.fields and 'z' in self.fields:\n            last_coord_key = 'z'\n        elif 'x' in self.fields and 'y' in self.fields:\n            last_coord_key = 'y'\n        elif 'x' in self.fields:\n            last_coord_key = 'x'\n        else:\n            raise LenaValueError(\"Graph has no coordinates\")\n\n        factor = other / self.scale\n        last_coord = self.fields[last_coord_key][-1]\n        self.fields[last_coord_key][-1] *= factor\n        self.scale = other\n```"}}}
{"dataset": "coderEval", "task_id": "62b87b869a0c4fa8b80b35e1", "original_prompt": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n\t\"\"\"\n\tConvert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code for the `hist_to_graph` function based on your description:\n\n```python\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    if make_value is None:\n        make_value = lambda bin_: bin_\n\n    graph_points = []\n\n    for bin_ in hist:\n        if get_coordinate == \"left\":\n            x = bin_.left\n        elif get_coordinate == \"right\":\n            x = bin_.right\n        elif get_coordinate == \"middle\":\n            x = (bin_.left + bin_.right) / 2\n        else:\n            raise ValueError(\"Invalid get_coordinate value\")\n\n        value = make_value(bin_)\n\n        if isinstance(value, tuple):\n            point = {field_names[i]: value[i] for i in range(len(value))}\n        else:\n            point = {field_names[0]: x, field_names[1]: value}\n\n        graph_points.append(point)\n\n    graph = {\"points\": graph_points}\n\n    if scale is True:\n        graph[\"scale\"] = hist.scale\n    elif scale is not None:\n        graph[\"scale\"] = scale\n\n    return graph\n```\n\nThis function assumes that `hist` is an iterable of bins, where each bin has attributes `left` and `right`. The `make_value` function is used to extract the value from each bin, and the `field_names` are used to name the fields in the resulting graph points. The `scale` is set based on the provided argument."}}}
{"dataset": "coderEval", "task_id": "62b8b4baeb7e40a82d2d1136", "original_prompt": "def _verify(iface, candidate, tentative=False, vtype=None):\n\t\"\"\"\n\tVerify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code that implements the `_verify` function based on the description you provided:\n\n```python\nfrom zope.interface import Interface, implementer, provider, Invalid, InterfaceClass, providedBy\nfrom inspect import signature, Signature\n\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    errors = []\n\n    # Check if iface is an Interface or InterfaceClass\n    if not isinstance(iface, (Interface, InterfaceClass)):\n        raise Invalid(\"Invalid interface type\")\n\n    # Check if candidate claims to provide the interface\n    if not tentative and not providedBy(candidate).isOrExtends(iface):\n        errors.append(f\"{candidate} does not provide the interface {iface}\")\n\n    # Check all methods\n    iface_methods = iface.names()\n    candidate_methods = dir(candidate)\n\n    for method_name in iface_methods:\n        if callable(getattr(iface, method_name, None)):\n            if method_name not in candidate_methods:\n                errors.append(f\"Missing method: {method_name}\")\n            else:\n                iface_method = getattr(iface, method_name)\n                candidate_method = getattr(candidate, method_name)\n                \n                if not callable(candidate_method):\n                    errors.append(f\"{method_name} is not callable\")\n                    continue\n\n                # Check method signatures\n                iface_signature = signature(iface_method)\n                candidate_signature = signature(candidate_method)\n\n                if iface_signature!= candidate_signature:\n                    errors.append(f\"Signature mismatch for method {method_name}\")\n\n    # Check all attributes\n    iface_attrs = [attr for attr in iface.names() if not callable(getattr(iface, attr, None))]\n    candidate_attrs = dir(candidate)\n\n    for attr_name in iface_attrs:\n        if attr_name not in candidate_attrs:\n            errors.append(f\"Missing attribute: {attr_name}\")\n\n    if errors:\n        if len(errors) == 1:\n            raise Invalid(errors[0])\n        else:\n            raise Invalid(\"\\n\".join(errors))\n\n    return True\n```\n\n### Explanation:\n- **Interface Check**: Verifies if `iface` is a valid interface.\n- **ProvidedBy Check**: Confirms if the candidate provides the interface unless `tentative` is `True`.\n- **Method Verification**: Ensures all methods in the interface are present in the candidate and have matching signatures.\n- **Attribute Verification**: Ensures all attributes in the interface are present in the candidate.\n- **Error Handling**: Collects all errors and raises them together, or raises a single error if only one exists."}}}
{"dataset": "coderEval", "task_id": "62b8b4baeb7e40a82d2d1137", "original_prompt": "def verifyObject(iface, candidate, tentative=False):\n\t\"\"\"\n\tVerify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom zope.interface import InterfaceClass, Invalid, implementer\nfrom zope.interface.verify import verifyClass\n\ndef verifyObject(iface, candidate, tentative=False):\n    errors = []\n    \n    # Step 1: Check if the candidate claims to provide the interface\n    if not tentative and not iface.providedBy(candidate):\n        errors.append(f\"{candidate} does not claim to provide {iface}\")\n\n    # Step 2: Verify that the candidate's class implements the interface\n    try:\n        verifyClass(iface, type(candidate))\n    except Invalid as e:\n        errors.extend(str(e).split('\\n'))\n\n    # Step 3: Collect all errors\n    if errors:\n        if len(errors) == 1:\n            raise Invalid(errors[0])\n        else:\n            raise Invalid('\\n'.join(errors))\n\n    return True\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b4c1eb7e40a82d2d1139", "original_prompt": "def verifyClass(iface, candidate, tentative=False):\n\t\"\"\"\n\tVerify that the *candidate* might correctly provide *iface*.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef verifyClass(iface, candidate, tentative=False):\n    if not hasattr(candidate, '__dict__'):\n        return False\n    required_methods = iface.__abstractmethods__\n    for method in required_methods:\n        if not hasattr(candidate, method):\n            return False\n        if tentative:\n            return True\n        if not callable(getattr(candidate, method)):\n            return False\n    return True\n```"}}}
{"dataset": "coderEval", "task_id": "62b8b559eb7e40a82d2d11f6", "original_prompt": "def determineMetaclass(bases, explicit_mc=None):\n\t\"\"\"\n\tDetermine metaclass from 1+ bases and optional explicit __metaclass__\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here is the Python code for the `determineMetaclass` function:\n\n```python\ndef determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is not None:\n        return explicit_mc\n\n    metaclasses = set()\n    for base in bases:\n        meta = type(base)\n        if meta is not type:\n            metaclasses.add(meta)\n\n    if len(metaclasses) == 1:\n        return metaclasses.pop()\n    elif len(metaclasses) > 1:\n        raise TypeError(\"Cannot create a consistent method resolution \"\n                        \"order (MRO) for bases %r\" % (bases,))\n    else:\n        return type\n```\n\nThis function determines the appropriate metaclass given a list of base classes and an optional explicit metaclass. It checks for consistency among the metaclasses of the base classes. If there's exactly one unique metaclass, it returns that. If there are multiple conflicting metaclasses, it raises a `TypeError`. If no bases have a defined metaclass, it defaults to using `type`."}}}
{"dataset": "coderEval", "task_id": "62b8d22a48ba5a41d1c3f47d", "original_prompt": "def pop(self, key, default=__marker):\n\t\"\"\"\n\tD.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's a Python implementation of the `pop` method for a dictionary-like class:\n\n```python\nclass D:\n    def __init__(self):\n        self._data = {}\n        self.__marker = object()\n\n    def pop(self, key, default=__marker):\n        if key in self._data:\n            value = self._data.pop(key)\n            return value\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n```\n\nThis code defines a class `D` with a `pop` method that behaves as described. The `__marker` is used to distinguish between a user-provided `None` default and no default provided."}}}
{"dataset": "coderEval", "task_id": "62b8d23748ba5a41d1c3f497", "original_prompt": "def popitem(self):\n\t\"\"\"\n\tRemove and return the `(key, value)` pair least frequently used.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass LFU:\n    def __init__(self):\n        self.key_freq = {}\n        self.freq_keys = {}\n        self.min_freq = 0\n\n    def popitem(self):\n        if not self.key_freq:\n            return None\n\n        # Get the keys with the minimum frequency\n        keys = self.freq_keys[self.min_freq]\n        key = keys.pop(0)\n\n        # If no keys left with the minimum frequency, update min_freq\n        if not keys:\n            del self.freq_keys[self.min_freq]\n            self.min_freq += 1\n\n        # Remove the key from key_freq\n        value = self.key_freq.pop(key)\n        return key, value\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d23a48ba5a41d1c3f499", "original_prompt": "def popitem(self):\n\t\"\"\"\n\tRemove and return the `(key, value)` pair least recently used.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass LRUCache:\n    def __init__(self):\n        self.cache = {}\n        self.order = []\n\n    def popitem(self):\n        if not self.order:\n            return None\n        key = self.order.pop(0)\n        value = self.cache.pop(key)\n        return (key, value)\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d23c48ba5a41d1c3f49b", "original_prompt": "def popitem(self):\n\t\"\"\"\n\t\"Remove and return the (key, value) pair most recently used.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass LRUCache:\n    def __init__(self):\n        self.cache = {}\n        self.order = []\n\n    def popitem(self):\n        if not self.order:\n            raise KeyError(\"Cache is empty.\")\n        \n        key = self.order.pop()\n        value = self.cache.pop(key)\n        return key, value\n\n    def get(self, key):\n        if key not in self.cache:\n            return None\n        self.order.remove(key)\n        self.order.append(key)\n        return self.cache[key]\n\n    def put(self, key, value):\n        if key in self.cache:\n            self.order.remove(key)\n        self.cache[key] = value\n        self.order.append(key)\n\n    def __contains__(self, key):\n        return key in self.cache\n\n# Example usage:\n# cache = LRUCache()\n# cache.put(1, 'a')\n# cache.put(2, 'b')\n# print(cache.get(1))  # 'a'\n# print(cache.popitem())  # (2, 'b')\n```"}}}
{"dataset": "coderEval", "task_id": "62b8d23e48ba5a41d1c3f49e", "original_prompt": "def popitem(self):\n\t\"\"\"\n\tFind, remove and return a random `(key, value)` pair via __choice in the class\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's a Python implementation of the `popitem` method without docstrings and comments:\n\n```python\nimport random\n\nclass MyDict:\n    def __init__(self):\n        self.data = {}\n    \n    def __choice(self):\n        return random.choice(list(self.data.items()))\n    \n    def popitem(self):\n        item = self.__choice()\n        key, value = item\n        del self.data[key]\n        return item\n\n# Example usage:\n# my_dict = MyDict()\n# my_dict.data = {'a': 1, 'b': 2, 'c': 3}\n# print(my_dict.popitem())\n```\n\nThis code defines a class `MyDict` with a `popitem` method that removes and returns a random `(key, value)` pair from the dictionary. The `__choice` method is used to select a random item."}}}
{"dataset": "coderEval", "task_id": "62b43425903eeb48555d3ea1", "original_prompt": "def _create_in_regex(self) -> Pattern:\n\t\"\"\"\n\tCreate the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport re\nfrom typing import Pattern\n\ndef _create_in_regex(self) -> Pattern:\n    pattern = r\"(?P<param_name>\\w+)=\\((?P<values>[^)]+)\\)\"\n    return re.compile(pattern)\n```"}}}
{"dataset": "coderEval", "task_id": "62b43426903eeb48555d3ea2", "original_prompt": "def _create_converter(self) -> _converting._Converter:\n\t\"\"\"\n\tCreate the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _create_converter(self) -> _converting._Converter:\n    class Converter(_converting._Converter):\n        def convert(self, value):\n            # Example conversion logic\n            return str(value)\n\n    return Converter()\n```"}}}
{"dataset": "coderEval", "task_id": "62b8966c755ee91dce50a154", "original_prompt": "def isoparse(self, dt_str):\n\t\"\"\"\n\tParse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here is a Python function to parse an ISO-8601 datetime string into a `datetime.datetime` object using `dateutil.parser.isoparse`:\n\n```python\nimport datetime\nfrom dateutil import parser\n\ndef isoparse(dt_str):\n    return parser.isoparse(dt_str)\n```\n\nThis function leverages `dateutil.parser.isoparse`, which is capable of handling the various ISO-8601 formats described, including dates, times, and time zone offsets."}}}
{"dataset": "coderEval", "task_id": "62b896de755ee91dce50a183", "original_prompt": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n\t\"\"\"\n\tParse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code implementing the `parse` function described in your request:\n\n```python\nfrom datetime import datetime, timedelta, timezone\nfrom dateutil.parser import parse as du_parse\nfrom dateutil.tz import gettz, tzoffset\n\nclass ParserError(Exception):\n    pass\n\nclass MyDateParser:\n    def parse(self, timestr, default=None, ignoretz=False, tzinfos=None, **kwargs):\n        if not isinstance(timestr, str):\n            raise TypeError(\"Input must be a string.\")\n\n        # Handle default\n        if isinstance(default, datetime):\n            parsed_datetime = du_parse(timestr, default=default, **kwargs)\n        else:\n            parsed_datetime = du_parse(timestr, **kwargs)\n\n        # Handle timezone info\n        if tzinfos and not ignoretz:\n            if isinstance(tzinfos, dict):\n                def tzinfos_func(tzname, tzoffset):\n                    return tzinfos.get(tzname, None) or tzoffset\n            elif callable(tzinfos):\n                tzinfos_func = tzinfos\n            else:\n                raise ParserError(\"Invalid tzinfos argument.\")\n\n            if parsed_datetime.tzinfo is not None:\n                tzname = parsed_datetime.tzinfo.tzname(parsed_datetime)\n                parsed_datetime = parsed_datetime.astimezone(tzinfos_func(tzname, parsed_datetime.tzinfo))\n\n        # Ignore timezone if specified\n        if ignoretz and parsed_datetime.tzinfo is not None:\n            parsed_datetime = parsed_datetime.replace(tzinfo=None)\n\n        return parsed_datetime\n\n# Example usage:\n# parser = MyDateParser()\n# result = parser.parse(\"2012-01-19 17:21:00 BRST\", tzinfos={\"BRST\": tzoffset(None, -7200)})\n# print(result)\n```\n\n### Key Points:\n- **Imports**: The code uses `datetime`, `timedelta`, and `timezone` from the `datetime` module, and `parse` from `dateutil.parser`. It also uses `gettz` and `tzoffset` from `dateutil.tz` for handling time zones.\n- **Error Handling**: Raises `TypeError` for non-string inputs and `ParserError` for invalid `tzinfos`.\n- **Time Zone Handling**: If `tzinfos` is provided and `ignoretz` is not set, it uses the `tzinfos` to adjust the timezone.\n- **Ignoring Time Zones**: If `ignoretz` is `True`, it removes the timezone information from the resulting"}}}
{"dataset": "coderEval", "task_id": "62b8a4a4755ee91dce50a3d3", "original_prompt": "def fromutc(self, dt):\n\t\"\"\"\n\tGiven a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here is a Python implementation of the `fromutc` method based on your description:\n\n```python\nfrom datetime import datetime, timedelta, timezone\nimport pytz\n\nclass CustomTimezone:\n    def __init__(self, tz):\n        self.tz = pytz.timezone(tz)\n\n    def fromutc(self, dt):\n        if dt.tzinfo is None or dt.tzinfo.utcoffset(dt) is None:\n            raise ValueError(\"The datetime must be timezone-aware.\")\n\n        # Convert the provided datetime to the target timezone\n        target_dt = self.tz.fromutc(dt.replace(tzinfo=timezone.utc))\n\n        # Determine if the datetime is ambiguous\n        is_ambiguous = self.tz._utc_transition_times and \\\n                       target_dt.tzinfo._is_ambiguous(target_dt)\n\n        # Determine the fold state\n        fold = target_dt.fold\n\n        return target_dt, is_ambiguous, fold\n\n# Example usage:\n# custom_tz = CustomTimezone('US/Eastern')\n# naive_dt = datetime(2023, 11, 5, 1, 30)  # This is an ambiguous time during DST end\n# aware_dt = naive_dt.replace(tzinfo=timezone.utc)\n# new_dt, is_ambiguous, fold = custom_tz.fromutc(aware_dt)\n# print(new_dt, is_ambiguous, fold)\n```\n\nThis code defines a `CustomTimezone` class with a `fromutc` method. The method takes a timezone-aware `datetime` object, converts it to the specified timezone, and checks for ambiguity and fold state. This implementation uses the `pytz` library to handle timezone conversions and checks."}}}
{"dataset": "coderEval", "task_id": "62b8a7b2755ee91dce50a4a7", "original_prompt": "def default_tzinfo(dt, tzinfo):\n\t\"\"\"\n\tSets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom datetime import datetime\n\ndef default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n```"}}}
{"dataset": "coderEval", "task_id": "6305f9991d275c6667163c50", "original_prompt": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n\t\"\"\"\n\tSet the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code for the task described:\n\n```python\nclass FileSlicer:\n    def __init__(self):\n        self.before = None\n        self.after = None\n\n    def set_cut_chars(self, before: bytes, after: bytes) -> None:\n        self.before = before\n        self.after = after\n```\n\nThis code defines a class `FileSlicer` with a method `set_cut_chars` that sets the delimiter bytes for slicing a file."}}}
{"dataset": "coderEval", "task_id": "6306292052e177c0ba469f09", "original_prompt": "def identify_request(request: RequestType):\n\t\"\"\"\n\tCheck whether the request body loaded using JSON contains events. If yes, True is returned, otherwise, check whether the tag of the XML loaded from the request body is Magic_ENV_TAG, if yes, return True. If neither of the preceding conditions is met, return False.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport json\nimport xml.etree.ElementTree as ET\nfrom typing import Union\n\nclass RequestType:\n    def __init__(self, body: str, content_type: str):\n        self.body = body\n        self.content_type = content_type\n\ndef identify_request(request: RequestType) -> bool:\n    if request.content_type == 'application/json':\n        try:\n            data = json.loads(request.body)\n            return 'events' in data\n        except json.JSONDecodeError:\n            return False\n    elif request.content_type == 'application/xml':\n        try:\n            root = ET.fromstring(request.body)\n            return root.tag == 'Magic_ENV_TAG'\n        except ET.ParseError:\n            return False\n    return False\n```"}}}
{"dataset": "coderEval", "task_id": "6306292152e177c0ba469f0d", "original_prompt": "def identify_request(request: RequestType) -> bool:\n\t\"\"\"\n\tCheck whether the request body loaded using JSON contains events. If yes, True is returned. Otherwise, False is returned.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport json\nfrom typing import Any\n\nclass RequestType:\n    def __init__(self, body: str):\n        self.body = body\n\ndef identify_request(request: RequestType) -> bool:\n    try:\n        data = json.loads(request.body)\n        return 'events' in data\n    except json.JSONDecodeError:\n        return False\n```"}}}
{"dataset": "coderEval", "task_id": "6306292252e177c0ba469f11", "original_prompt": "def format_dt(dt):\n\t\"\"\"\n\tUse the ensure_timezone function to format the time of dt and return the time.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom datetime import datetime\nfrom pytz import timezone, UTC\n\ndef ensure_timezone(dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    return dt\n\ndef format_dt(dt):\n    dt = ensure_timezone(dt)\n    return dt.strftime('%Y-%m-%d %H:%M:%S %Z%z')\n```\n\nThis code defines the `ensure_timezone` function to add a timezone if it's missing and formats the datetime object with `format_dt`."}}}
{"dataset": "coderEval", "task_id": "6306292352e177c0ba469f1d", "original_prompt": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n\t\"\"\"\n\tFind tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom typing import Set, Tuple, Callable, Optional\n\ndef find_tags(text: str, replacer: Optional[Callable[[str], str]] = None) -> Tuple[Set[str], str]:\n    in_code_block = False\n    tags = set()\n    result = []\n    i = 0\n    while i < len(text):\n        if text[i:i+3] == '```':\n            in_code_block = not in_code_block\n            result.append(text[i:i+3])\n            i += 3\n        elif text[i] == '#' and not in_code_block:\n            j = i + 1\n            while j < len(text) and (text[j].isalnum() or text[j] == '_'):\n                j += 1\n            tag = text[i+1:j]\n            tags.add(tag)\n            if replacer:\n                replaced = replacer(tag)\n                result.append(text[i:j].replace(tag, replaced))\n            else:\n                result.append(text[i:j])\n            i = j\n        else:\n            result.append(text[i])\n            i += 1\n    return tags, ''.join(result)\n```"}}}
{"dataset": "coderEval", "task_id": "6306292352e177c0ba469f1e", "original_prompt": "def process_text_links(text):\n\t\"\"\"\n\tProcess links in text, adding some attributes and linkifying textual links.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport re\n\ndef process_text_links(text):\n    url_pattern = r'(https?://\\S+)'\n    linkified_text = re.sub(url_pattern, r'<a href=\"\\1\" target=\"_blank\">\\1</a>', text)\n    \n    # Example of adding more attributes\n    linkified_text = re.sub(r'<a href=\"', r'<a href=\" target=\"_blank\" rel=\"noopener noreferrer\" ', linkified_text)\n    \n    # Find and process textual links (e.g., \"example.com\" without http/https)\n    textual_link_pattern = r'\\b(\\w+\\.\\w{2,3}(?:\\.\\w{2})?)\\b'\n    def replace_textual_link(match):\n        domain = match.group(0)\n        return f'<a href=\"http://{domain}\" target=\"_blank\" rel=\"noopener noreferrer\">{domain}</a>'\n    \n    linkified_text = re.sub(textual_link_pattern, replace_textual_link, linkified_text)\n    \n    return linkified_text\n```"}}}
{"dataset": "coderEval", "task_id": "6306292652e177c0ba469f34", "original_prompt": "def fetch_content_type(url: str) -> Optional[str]:\n\t\"\"\"\n\tSet the head of the request through the URL and USER_AGENT.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport requests\nfrom typing import Optional\n\ndef fetch_content_type(url: str) -> Optional[str]:\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    }\n    try:\n        response = requests.head(url, headers=headers)\n        return response.headers.get('Content-Type')\n    except requests.RequestException:\n        return None\n```"}}}
{"dataset": "coderEval", "task_id": "6306292a52e177c0ba469f41", "original_prompt": "def test_tag(tag: str) -> bool:\n\t\"\"\"\n\tChecks whether each character in the LEEGAL_TAG_CHARS belongs to a tag. If any character belongs to a tag, the value False is returned. Otherwise, the value True is returned.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef test_tag(tag: str) -> bool:\n    LEGAL_TAG_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&'()*+,;=:@\"\n\n    for char in tag:\n        if char in LEGAL_TAG_CHARS:\n            return False\n    return True\n```"}}}
{"dataset": "coderEval", "task_id": "6306298b52e177c0ba469fdc", "original_prompt": "def xml_children_as_dict(node):\n\t\"\"\"\n\tTurn the children of node <xml> into a dict, keyed by tag name.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef xml_children_as_dict(node):\n    result = {}\n    for child in node:\n        if child.tag not in result:\n            result[child.tag] = []\n        result[child.tag].append(child)\n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "6306299052e177c0ba469fe8", "original_prompt": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\t\"\"\"\n\tCheck whether sender_handle is the same as entity_handle. If yes, return True. Otherwise, return False.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n```"}}}
{"dataset": "coderEval", "task_id": "630629b952e177c0ba46a043", "original_prompt": "def get_nodeinfo_well_known_document(url, document_path=None):\n\t\"\"\"\n\tReturns a formatted dictionary, including information such as url and document_path.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport requests\n\ndef get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/.well-known/document'\n    \n    full_url = url + document_path\n    response = requests.get(full_url)\n    \n    if response.status_code == 200:\n        return {\n            'url': url,\n            'document_path': document_path,\n            'content': response.text\n        }\n    else:\n        return {\n            'url': url,\n            'document_path': document_path,\n            'error': f\"Failed to retrieve document: {response.status_code}\"\n        }\n```"}}}
{"dataset": "coderEval", "task_id": "630629d052e177c0ba46a0a1", "original_prompt": "def verify_relayable_signature(public_key, doc, signature):\n\t\"\"\"\n\tVerify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nfrom lxml import etree\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding, rsa\nfrom cryptography.hazmat.primitives.serialization import load_pem_public_key\n\ndef verify_relayable_signature(public_key_pem, doc, signature):\n    # Load the public key\n    public_key = load_pem_public_key(public_key_pem)\n\n    # Parse the XML document\n    root = etree.fromstring(doc)\n\n    # Extract the signature element\n    signature_element = root.find('.//{http://www.w3.org/2000/09/xmldsig#}Signature')\n\n    # Extract the signed info element\n    signed_info = signature_element.find('.//{http://www.w3.org/2000/09/xmldsig#}SignedInfo')\n\n    # Extract the canonicalizationMethod, signatureMethod, and reference elements\n    canonicalization_method = signed_info.find('.//{http://www.w3.org/2000/09/xmldsig#}CanonicalizationMethod')\n    signature_method = signed_info.find('.//{http://www.w3.org/2000/09/xmldsig#}SignatureMethod')\n    reference = signed_info.find('.//{http://www.w3.org/2000/09/xmldsig#}Reference')\n\n    # Construct the signed info to be verified\n    signed_info_str = etree.tostring(signed_info, method='c14n')\n\n    # Extract the reference URI\n    reference_uri = reference.get('URI', '')\n\n    # Extract the transform algorithms\n    transforms = reference.find('.//{http://www.w3.org/2000/09/xmldsig#}Transforms')\n    if transforms is not None:\n        for transform in transforms:\n            if transform.get('Algorithm') == 'http://www.w3.org/2000/09/xmldsig#enveloped-signature':\n                root.remove(signature_element)\n\n    # Serialize the XML to be signed\n    xml_to_sign = etree.tostring(root, method='c14n')\n\n    # Load the signature\n    signature_bytes = bytes.fromhex(signature)\n\n    # Verify the signature\n    try:\n        public_key.verify(\n            signature_bytes,\n            xml_to_sign,\n            padding.PKCS1v15(),\n            hashes.SHA256() if signature_method.get('Algorithm') == 'http://www.w3.org/2001/04/xmldsig-more#rsa-sh"}}}
{"dataset": "coderEval", "task_id": "630629e052e177c0ba46a0c4", "original_prompt": "def parse_diaspora_webfinger(document: str) -> Dict:\n\t\"\"\"\n\tThe webfinger is obtained by reading the document in JSON format, the value of hcard_url in the webfinger is the value of href in links in the document.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport json\nfrom typing import Dict\n\ndef parse_diaspora_webfinger(document: str) -> Dict:\n    data = json.loads(document)\n    hcard_url = data['links'][0]['href']\n    return {\"hcard_url\": hcard_url}\n```"}}}
{"dataset": "coderEval", "task_id": "630629e152e177c0ba46a0d1", "original_prompt": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n\t\"\"\"\n\tTry to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport requests\nfrom typing import Optional\n\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    url = f\"https://{handle}/.well-known/webfinger\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            return response.text\n    except:\n        pass\n    return None\n```"}}}
{"dataset": "coderEval", "task_id": "630629e152e177c0ba46a0d2", "original_prompt": "def retrieve_and_parse_diaspora_webfinger(handle):\n\t\"\"\"\n\tRetrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport requests\nfrom xml.etree import ElementTree\n\ndef retrieve_and_parse_diaspora_webfinger(handle):\n    url = f\"https://{handle}/.well-known/webfinger?resource=acct:{handle}\"\n    response = requests.get(url)\n    response.raise_for_status()\n    \n    root = ElementTree.fromstring(response.content)\n    data = {}\n    \n    for link in root.findall(\"{http://www.w3.org/2005/Atom}link\"):\n        rel = link.attrib.get(\"rel\")\n        href = link.attrib.get(\"href\")\n        if rel and href:\n            data[rel] = href\n    \n    return data\n```"}}}
{"dataset": "coderEval", "task_id": "630629e252e177c0ba46a0d6", "original_prompt": "def retrieve_diaspora_host_meta(host):\n\t\"\"\"\n\tRetrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport requests\nfrom xml.etree import ElementTree as ET\n\nclass XRD:\n    def __init__(self, root_element):\n        self.root = root_element\n\ndef retrieve_diaspora_host_meta(host):\n    url = f\"https://{host}/.well-known/host-meta\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        root = ET.fromstring(response.content)\n        return XRD(root)\n    return None\n```"}}}
{"dataset": "coderEval", "task_id": "630629e752e177c0ba46a0fb", "original_prompt": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n\t\"\"\"\n\tSend a response containing data through the POST method.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's the Python code for the task described:\n\n```python\nimport requests\n\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    if method.lower() == \"post\":\n        response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    else:\n        response = requests.get(url, params=data, timeout=timeout, *args, **kwargs)\n    return response\n```"}}}
{"dataset": "coderEval", "task_id": "6306091073426c38ae68acac", "original_prompt": "def dict_insert(dic, val, key, *keys):\n\t\"\"\"\n\tinsert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef dict_insert(dic, val, key, *keys):\n    d = dic\n    for k in keys[:1]:\n        if k not in d:\n            d[k] = {}\n        d = d[k]\n    d[key] = val\n```"}}}
{"dataset": "coderEval", "task_id": "6306091a73426c38ae68acc8", "original_prompt": "def list_of_file_names(settings_dirs, spec_option):\n\t\"\"\"\n\tCreate and return a new IniType complex type via cli.ListOfFileNames()\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport click\n\ndef list_of_file_names(settings_dirs, spec_option):\n    return click.types.LIST_OF_FILE_NAMES(\n        settings_dirs, allow_dash=True, file_okay=True, dir_okay=False, resolve_path=True, case_sensitive=True, exists=True, readable=True, path_type=str, file_okay=spec_option\n    )\n```"}}}
{"dataset": "coderEval", "task_id": "6306091b73426c38ae68acd7", "original_prompt": "def ansible_config_manager(cls):\n\t\"\"\"\n\tGets the ansible config manager via ServiceName.ANSIBLE_CONFIG_MANAGER in cls._get_service()\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass ConfigManager:\n    def __init__(self, cls):\n        self.cls = cls\n\n    def _get_service(self):\n        # Placeholder for actual service retrieval logic\n        return {\n            'ServiceName': {\n                'ANSIBLE_CONFIG_MANAGER': 'ConfigManagerName'\n            }\n        }\n\n    def ansible_config_manager(self):\n        service = self._get_service()\n        return service['ServiceName']['ANSIBLE_CONFIG_MANAGER']\n```"}}}
{"dataset": "coderEval", "task_id": "6306091b73426c38ae68acd9", "original_prompt": "def workspace_manager(cls):\n\t\"\"\"\n\tGets the workspace manager via ServiceName.WORKSPACE_MANAGER in cls._get_service()\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Here's a Python implementation of the `workspace_manager` function as a class method without using docstrings or comments:\n\n```python\nclass WorkspaceService:\n    def __init__(self):\n        self.services = {\n            'WORKSPACE_MANAGER': 'WorkspaceManagerService'\n        }\n\n    def _get_service(self, service_name):\n        return self.services.get(service_name, None)\n\n    @classmethod\n    def workspace_manager(cls):\n        return cls()._get_service('WORKSPACE_MANAGER')\n```\n\nIn this code:\n\n- A `WorkspaceService` class is created with a dictionary `services` that maps service names to their implementations.\n- The `_get_service` method retrieves a service by its name from the `services` dictionary.\n- The `workspace_manager` class method creates an instance of `WorkspaceService` and calls `_get_service` with `'WORKSPACE_MANAGER'` to get the workspace manager."}}}
{"dataset": "coderEval", "task_id": "6306091b73426c38ae68acda", "original_prompt": "def plugins_manager(cls):\n\t\"\"\"\n\tGets the plugin manager via ServiceName.PLUGINS_MANAGER in cls._get_service()\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef plugins_manager(cls):\n    return cls._get_service().get('ServiceName.PLUGINS_MANAGER')\n```"}}}
{"dataset": "coderEval", "task_id": "6306091c73426c38ae68acdc", "original_prompt": "def validate_from_content(cls, spec_content=None):\n\t\"\"\"\n\tvalidates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport yaml\n\nclass IRValidatorException(Exception):\n    pass\n\nclass Validator:\n    REQUIRED_FIELDS = {'field1', 'field2', 'field3'}  # Example required fields\n\n    @classmethod\n    def validate_from_content(cls, spec_content=None):\n        if spec_content is None:\n            raise IRValidatorException(\"Spec content is missing\")\n\n        try:\n            content = yaml.safe_load(spec_content)\n        except yaml.YAMLError as e:\n            raise IRValidatorException(f\"Error parsing YAML: {e}\")\n\n        missing_fields = cls.REQUIRED_FIELDS - content.keys()\n        if missing_fields:\n            raise IRValidatorException(f\"Missing mandatory fields: {missing_fields}\")\n\n        return content\n```"}}}
{"dataset": "coderEval", "task_id": "6306091c73426c38ae68acdd", "original_prompt": "def validate_from_file(cls, yaml_file=None):\n\t\"\"\"\n\tLoads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport yaml\nfrom yaml.loader import SafeLoader\n\nclass IRValidatorException(Exception):\n    pass\n\nclass YourClassName:\n    @classmethod\n    def validate_from_file(cls, yaml_file=None):\n        required_fields = {'field1', 'field2', 'field3'}  # Replace with your required fields\n\n        if yaml_file is None:\n            raise IRValidatorException(\"YAML file path is required.\")\n\n        with open(yaml_file, 'r') as file:\n            data = yaml.load(file, Loader=SafeLoader)\n\n        if not isinstance(data, dict):\n            raise IRValidatorException(\"YAML content is not a dictionary.\")\n\n        missing_fields = required_fields - data.keys()\n        if missing_fields:\n            raise IRValidatorException(f\"Missing mandatory fields: {', '.join(missing_fields)}\")\n\n        return data\n```"}}}
{"dataset": "coderEval", "task_id": "6306091d73426c38ae68ace5", "original_prompt": "def _include_groups(self, parser_dict):\n\t\"\"\"\n\tResolves the include dict directive in the spec files.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _include_groups(self, parser_dict):\n    included_data = {}\n    for key, value in parser_dict.items():\n        if isinstance(value, dict) and 'include' in value:\n            include_key = value['include']\n            if include_key in parser_dict:\n                included_data[key] = parser_dict[include_key]\n            else:\n                included_data[key] = {}\n        else:\n            included_data[key] = value\n    return included_data\n```"}}}
{"dataset": "coderEval", "task_id": "6306092373426c38ae68acfa", "original_prompt": "def get_spec_defaults(self):\n\t\"\"\"\n\tResolve arguments' values from spec and other sources with self._get_defaults()\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef get_spec_defaults(self):\n    defaults = {}\n    for arg in self.spec.arguments:\n        if arg.name in self.spec.values:\n            defaults[arg.name] = self.spec.values[arg.name]\n        else:\n            defaults[arg.name] = self._get_defaults(arg.name)\n    return defaults\n```"}}}
{"dataset": "coderEval", "task_id": "6306092973426c38ae68ad01", "original_prompt": "def get_deprecated_args(self):\n\t\"\"\"\n\tReturning dict with options which deprecate others. options from self.spec_helper.iterate_option_specs()\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef get_deprecated_args(self):\n    deprecated_args = {}\n    for option_spec in self.spec_helper.iterate_option_specs():\n        if option_spec.deprecated:\n            deprecated_args[option_spec.name] = option_spec.deprecated_by\n    return deprecated_args\n```"}}}
{"dataset": "coderEval", "task_id": "6306092c73426c38ae68ad02", "original_prompt": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n\t\"\"\"\n\tValidates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass ArgumentValidator:\n    deprecated_arguments = {\n        'old_arg1': 'new_arg1',\n        'old_arg2': 'new_arg2'\n    }\n\n    def validate_arg_deprecation(self, cli_args, answer_file_args):\n        all_args = {**cli_args, **answer_file_args}\n        deprecated_found = {}\n\n        for old_arg, new_arg in self.deprecated_arguments.items():\n            if old_arg in all_args:\n                deprecated_found[old_arg] = new_arg\n\n        if deprecated_found:\n            for old_arg, new_arg in deprecated_found.items():\n                print(f\"Deprecated argument '{old_arg}' found. Use '{new_arg}' instead.\")\n\nvalidator = ArgumentValidator()\ncli_args = {'old_arg1': 'value1'}\nanswer_file_args = {'old_arg2': 'value2'}\nvalidator.validate_arg_deprecation(cli_args, answer_file_args)\n```"}}}
{"dataset": "coderEval", "task_id": "6306092d73426c38ae68ad04", "original_prompt": "def get_parser_option_specs(self, command_name):\n\t\"\"\"\n\tGets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass CommandParser:\n    def get_parser_option_specs(self, command_name):\n        options = {\n           'main': ['--help', '--version'],\n            'virsh': ['--list', '--start', '--stop'],\n            'ospd': ['--debug', '--quiet'],\n            # Add more command options as needed\n        }\n        return options.get(command_name, [])\n```\n\nThis code defines a `CommandParser` class with a method `get_parser_option_specs` that returns a list of options for a given command name. You can expand the `options` dictionary with more commands and their respective options as needed."}}}
{"dataset": "coderEval", "task_id": "6306092d73426c38ae68ad05", "original_prompt": "def get_option_spec(self, command_name, argument_name):\n\t\"\"\"\n\tGets the specification for the specified option name. Get options of the given command_name with self.get_parser_option_specs()\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef get_option_spec(self, command_name, argument_name):\n    options = self.get_parser_option_specs(command_name)\n    for option in options:\n        if option['name'] == argument_name:\n            return option\n    return None\n```"}}}
{"dataset": "coderEval", "task_id": "6306092d73426c38ae68ad06", "original_prompt": "def get_silent_args(self, args):\n\t\"\"\"\n\tlist of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef get_silent_args(self, args):\n    silent_args = []\n    for arg in args:\n        if arg.startswith('--silent-'):\n            silent_args.append(arg.replace('--silent-', ''))\n    return silent_args\n```"}}}
{"dataset": "coderEval", "task_id": "6306092d73426c38ae68ad07", "original_prompt": "def validate_requires_args(self, args):\n\t\"\"\"\n\tCheck if all the required arguments have been provided.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef validate_requires_args(self, args):\n    required_args = {'arg1', 'arg2', 'arg3'}  # Replace with actual required arguments\n    missing_args = required_args - args.keys()\n    if missing_args:\n        return False\n    return True\n```"}}}
{"dataset": "coderEval", "task_id": "6306092d73426c38ae68ad08", "original_prompt": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n\t\"\"\"\n\tList arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _get_conditionally_required_args(self, command_name, options_spec, args):\n    conditionally_required_args = []\n    for option in options_spec:\n        if'required_when' in option:\n            condition = option['required_when']\n            # Assume condition is a callable or a key in args that evaluates to a boolean\n            if callable(condition):\n                if condition(args):\n                    conditionally_required_args.append(option['name'])\n            elif isinstance(condition, str):\n                if args.get(condition):\n                    conditionally_required_args.append(option['name'])\n    return conditionally_required_args\n```"}}}
{"dataset": "coderEval", "task_id": "6306092e73426c38ae68ad09", "original_prompt": "def validate_length_args(self, args):\n\t\"\"\"\n\tCheck if value of the given args is not longer than length specified. \\n:param args: The received arguments.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef validate_length_args(self, args, max_length):\n    for arg in args:\n        if len(arg) > max_length:\n            return False\n    return True\n```"}}}
{"dataset": "coderEval", "task_id": "6306092e73426c38ae68ad0a", "original_prompt": "def validate_choices_args(self, args):\n\t\"\"\"\n\tCheck if value of the given args is one of the available choices. \\n:param args: The received arguments.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nclass Validator:\n    def __init__(self, choices):\n        self.choices = choices\n\n    def validate_choices_args(self, args):\n        for arg in args:\n            if arg not in self.choices:\n                raise ValueError(f\"Invalid choice: {arg}. Available choices are: {self.choices}\")\n\n# Example usage:\n# validator = Validator(['option1', 'option2', 'option3'])\n# validator.validate_choices_args(['option1', 'option4'])\n```"}}}
{"dataset": "coderEval", "task_id": "6306092e73426c38ae68ad0b", "original_prompt": "def validate_min_max_args(self, args):\n\t\"\"\"\n\tCheck if value of the given args is between minimum and maximum values\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef validate_min_max_args(self, args):\n    for arg in args:\n        if 'value' not in arg or'min' not in arg or'max' not in arg:\n            return False\n        if not (arg['min'] <= arg['value'] <= arg['max']):\n            return False\n    return True\n```"}}}
{"dataset": "coderEval", "task_id": "6306092e73426c38ae68ad0d", "original_prompt": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n\t\"\"\"\n\tReturns the corresponding function in COMPLEX_TYPES based on type_name and returns the result obtained by complex_action after option_name,(self.vars, self.defaults, self.plugin_path), subcommand, spec_option) is input.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "Certainly! Below is a Python function that performs the described task. It assumes that `COMPLEX_TYPES` is a dictionary mapping type names to functions, and `complex_action` is a function that processes the arguments accordingly.\n\n```python\ndef create_complex_argument_type(self, subcommand, type_name, option_name, spec_option):\n    complex_type_func = COMPLEX_TYPES.get(type_name)\n    if not complex_type_func:\n        raise ValueError(f\"Unknown complex type: {type_name}\")\n\n    return complex_type_func(option_name, (self.vars, self.defaults, self.plugin_path), subcommand, spec_option)\n```\n\nThis code retrieves the function associated with `type_name` from `COMPLEX_TYPES`, checks if it exists, and then calls it with the specified arguments. If the `type_name` is not found, it raises a `ValueError`."}}}
{"dataset": "coderEval", "task_id": "6306092e73426c38ae68ad0f", "original_prompt": "def get_nested_custom_and_control_args(self, args):\n\t\"\"\"\n\tSplit input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    custom_args = {}\n\n    for arg in args:\n        if arg.startswith('--control-'):\n            key = arg[10:]  # Remove the '--control-' prefix\n            control_args[key] = True\n        elif arg.startswith('--custom-'):\n            key, value = arg[9:].split('=', 1)  # Remove the '--custom-' prefix and split\n            custom_args[key] = value\n        else:\n            key, value = arg.split('=', 1)\n            if key in custom_args:\n                nested_args[key] = custom_args[key]\n            else:\n                nested_args[key] = value\n\n    return control_args, nested_args\n```"}}}
{"dataset": "coderEval", "task_id": "6306092e73426c38ae68ad11", "original_prompt": "def merge_extra_vars(vars_dict, extra_vars=None):\n\t\"\"\"\n\tExtend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        return vars_dict\n    \n    for key, value in extra_vars.items():\n        if key in vars_dict and isinstance(vars_dict[key], dict) and isinstance(value, dict):\n            vars_dict[key] = merge_extra_vars(vars_dict[key], value)\n        else:\n            vars_dict[key] = value\n    \n    return vars_dict\n```"}}}
{"dataset": "coderEval", "task_id": "6306092f73426c38ae68ad13", "original_prompt": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n\t\"\"\"\n\tWraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport subprocess\nimport json\n\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    args = ['ansible-playbook', playbook_path]\n\n    if verbose is not None:\n        args.extend(['-v'] * verbose)\n\n    if extra_vars is not None:\n        args.extend(['-e', json.dumps(extra_vars)])\n\n    if ansible_args:\n        for key, value in ansible_args.items():\n            args.append(f'--{key}')\n            if value is not True:  # Handle boolean flags\n                args.append(str(value))\n\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    if result.returncode!= 0:\n        raise Exception(f\"Ansible playbook failed: {result.stderr}\")\n\n    print(result.stdout)\n```"}}}
{"dataset": "coderEval", "task_id": "6306093273426c38ae68ad15", "original_prompt": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n\t\"\"\"\n\tRuns ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport subprocess\nimport json\n\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # Convert vars_dict to JSON string\n    vars_json = json.dumps(vars_dict)\n    \n    # Prepare the Ansible command with extra-vars\n    command = ['ansible-playbook'] + cli_args + ['-e', vars_json]\n    \n    # Execute the command\n    result = subprocess.run(command, capture_output=True, text=True)\n    \n    # Return the result output\n    return result.stdout\n```"}}}
{"dataset": "coderEval", "task_id": "63060ada73426c38ae68ad31", "original_prompt": "def _convert_non_cli_args(self, parser_name, values_dict):\n\t\"\"\"\n\tCasts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef _convert_non_cli_args(self, parser_name, values_dict):\n    type_mappings = {\n       'main': {'arg1': int, 'arg2': float},\n        'virsh': {'arg1': str, 'arg2': bool},\n        'ospd': {'arg1': list, 'arg2': dict}\n    }\n    \n    if parser_name in type_mappings:\n        for arg, cast_type in type_mappings[parser_name].items():\n            if arg in values_dict:\n                try:\n                    values_dict[arg] = cast_type(values_dict[arg])\n                except (ValueError, TypeError):\n                    pass\n```"}}}
{"dataset": "coderEval", "task_id": "63060b1a73426c38ae68ad3e", "original_prompt": "def get_plugin_spec_flatten_dict(plugin_dir):\n\t\"\"\"\n\tUse YAML to read various information in plugin_dir and return the information in dictionary form.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\nimport yaml\n\ndef get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_files = [f for f in os.listdir(plugin_dir) if f.endswith('.yaml') or f.endswith('.yml')]\n    result = {}\n\n    for file in plugin_files:\n        file_path = os.path.join(plugin_dir, file)\n        with open(file_path, 'r') as stream:\n            try:\n                data = yaml.safe_load(stream)\n                for key, value in data.items():\n                    if isinstance(value, dict):\n                        for sub_key, sub_value in value.items():\n                            result[f\"{key}_{sub_key}\"] = sub_value\n                    else:\n                        result[key] = value\n            except yaml.YAMLError as exc:\n                print(exc)\n\n    return result\n```"}}}
{"dataset": "coderEval", "task_id": "63060b1b73426c38ae68ad42", "original_prompt": "def inject_config(self):\n\t\"\"\"\n\tIf the ANSIBLE_CONFIG property does not exist in os.environ, set it to self.ansible_config_path.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\nimport os\n\ndef inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n```"}}}
{"dataset": "coderEval", "task_id": "63060b1b73426c38ae68ad43", "original_prompt": "def extend_cli(self, root_subparsers):\n\t\"\"\"\n\tAdds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.\n\t\"\"\"\n\t", "generations": {"microsoft/phi-4": {"baseline": "```python\ndef extend_cli(self, root_subparsers):\n\textension_parser = root_subparsers.add_parser('spec')\n\textension_parser.add_argument('--option1', type=str, help='Option 1')\n\textension_parser.add_argument('--option2', type=int, help='Option 2')\n\textension_parser.set_defaults(func=self.spec_command)\n\ndef spec_command(self, args):\n\tprint(f\"Running with option1: {args.option1} and option2: {args.option2}\")\n```"}}}
